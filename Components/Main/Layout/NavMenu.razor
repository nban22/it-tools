@implements IDisposable

@using it_tools.Data.DTOs
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToolRepository ToolRepository
@using System.Security.Claims
@using it_tools.Data.Repositories
@using it_tools.Data.Services
@inject ILogger<NavMenu> _logger
@inject ToolStateService ToolStateService

<!-- Header -->
<div class="text-white bg-gradient-to-br from-teal-600 via-teal-700 to-teal-800 shadow-lg p-6 text-center w-full">
    <h1 class="text-3xl font-extrabold tracking-tight uppercase cursor-pointer" @onclick=@(() =>
                                                                                        NavigationManager.NavigateTo("/"))>IT - Tools</h1>
    <p class="mt-1 text-sm font-medium text-teal-100 opacity-90">Handy tools for developers</p>
</div>

<!-- Menu -->
<div class="flex-1 overflow-y-auto bg-gray-50">
    @if (DisplayToolGroups != null)
    {
        @foreach (var group in DisplayToolGroups)
        {
            <div class="border-b border-gray-200 last:border-b-0">
                <!-- Group Header -->
                <button @onclick="() => ToggleGroup(group)"
                    class="w-full flex items-center justify-between px-5 py-4 text-gray-700 bg-white hover:bg-gray-100 focus:outline-none transition-colors duration-150 ease-in-out shadow-sm">
                    <span class="font-semibold text-sm uppercase tracking-wide">@group.Name</span>
                    <svg class="@(group.IsExpanded ? "rotate-90" : "") w-5 h-5 text-gray-500 transition-transform duration-200"
                        fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </button>

                <!-- Group Items -->
                @if (group.IsExpanded)
                {
                    <div class="bg-gray-50 pl-5 py-2">
                        @if (group.Tools != null)
                        {
                            @foreach (var tool in group.Tools)
                            {
                                <a href="tools/@tool.Slug"
                                    class="flex items-center px-4 py-3 text-gray-600 hover:bg-white hover:text-teal-600 rounded-lg mx-2 my-1 transition-all duration-150 ease-in-out group">
                                    @if (!string.IsNullOrEmpty(tool.Icon))
                                    {
                                        <span class="mr-3 text-lg w-5 text-center group-hover:text-teal-500">@tool.Icon</span>
                                    }
                                    <span class="font-medium text-sm">@tool.Name</span>
                                </a>
                            }
                        }
                    </div>
                }
            </div>
        }
    }
</div>

@code {
    private bool isLoggedIn;
    private string? currentUserId;
    private List<ToolGroupDto>? ToolGroups;
    private List<ToolGroupDto>? DisplayToolGroups;


    protected override async Task OnInitializedAsync()
    {
        // Subscribe to tool favorite changes
        ToolStateService.OnToolFavoriteChanged += HandleToolFavoriteChanged;

        await LoadToolGroups();
    }

    private async Task LoadToolGroups()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isLoggedIn = user.Identity?.IsAuthenticated ?? false;

        if (isLoggedIn)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                ToolGroups = await ToolRepository.GetAllToolGroups();
                var FavoriteGroup = await ToolRepository.GetFavoriteToolGroup(currentUserId);
                DisplayToolGroups = ToolGroups;
                if (FavoriteGroup != null)
                {
                    DisplayToolGroups.Insert(0, FavoriteGroup);
                }
            }
        }
        else
        {
            DisplayToolGroups = await ToolRepository.GetAllToolGroups();
        }
    }

    private void ToggleGroup(ToolGroupDto group)
    {
        group.IsExpanded = !group.IsExpanded; // Chỉ mở hoặc đóng nhóm hiện tại
    }

    // Handle tool favorite changes
    private void HandleToolFavoriteChanged(ToolDto updatedTool)
    {
        if (!isLoggedIn || string.IsNullOrEmpty(currentUserId))
            return;

        try
        {
            // Reload the favorite group to reflect changes
            var FavoriteGroupTask = ToolRepository.GetFavoriteToolGroup(currentUserId);
            FavoriteGroupTask.ContinueWith(task =>
            {
                if (task.IsCompletedSuccessfully)
                {
                    var FavoriteGroup = task.Result;
                    DisplayToolGroups = ToolGroups;
                    if (FavoriteGroup != null)
                    {
                        if (DisplayToolGroups != null && DisplayToolGroups.Count > 0)
                        {
                            DisplayToolGroups.RemoveAt(0);
                            DisplayToolGroups.Insert(0, FavoriteGroup);
                        }
                    }

                    InvokeAsync(StateHasChanged); // Force UI update
                }
                else if (task.IsFaulted)
                {
                    _logger.LogError(task.Exception, "Failed to update favorite tools in NavMenu");
                }
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to update favorite tools in NavMenu");
        }
    }

    public void Dispose()
    {
        // Unsubscribe when component is disposed
        ToolStateService.OnToolFavoriteChanged -= HandleToolFavoriteChanged;
    }
}