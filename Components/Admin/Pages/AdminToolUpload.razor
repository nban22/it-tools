@page "/admin/tools/add"
@layout it_tools.Components.Admin.Layout.AdminLayout
@inject it_tools.Data.ApplicationDbContext DbContext
@inject ILogger<AdminToolUpload> Logger
@using System.IO.Compression
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms

<div class="max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-md">
    <h3 class="text-xl font-semibold text-gray-800 mb-6">Upload New Tool</h3>
    <EditForm Model="newTool" OnValidSubmit="HandleSubmit" class="space-y-4">
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Upload ZIP File (containing DLL and JSON)</label>
            <InputFile OnChange="HandleFileSelected" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
        </div>
        <div>
            <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">Add Tool</button>
        </div>
    </EditForm>
</div>

@code {
    private Tool newTool = new Tool();
    private IBrowserFile? selectedFile;
    private string? tempGroupName;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        Logger.LogInformation("Đã chọn file: {FileName}", selectedFile?.Name);
    }

private async Task HandleSubmit()
{
    if (selectedFile != null)
    {
        Logger.LogInformation("Bắt đầu xử lý file: {FileName}", selectedFile.Name);
        var zipPath = Path.Combine("wwwroot/tools", selectedFile.Name);

        try
        {
            // Lưu file ZIP tạm thời
            using (var stream = new FileStream(zipPath, FileMode.Create))
            {
                await selectedFile.OpenReadStream().CopyToAsync(stream);
            }
            Logger.LogInformation("Đã lưu file ZIP vào: {ZipPath}", zipPath);

            // Đọc Slug từ file JSON trong ZIP trước khi giải nén
            string? slug = await GetSlugFromZip(zipPath);
            if (string.IsNullOrEmpty(slug))
            {
                Logger.LogWarning("Không tìm thấy Slug trong file JSON của ZIP: {ZipPath}", zipPath);
                return;
            }

            // Tạo đường dẫn thư mục đích dựa trên Slug
            var extractPath = Path.Combine("wwwroot/tools", slug);
            Logger.LogInformation("Sử dụng Slug '{Slug}' làm tên thư mục: {ExtractPath}", slug, extractPath);

            // Xóa thư mục cũ nếu tồn tại
            if (Directory.Exists(extractPath))
            {
                Directory.Delete(extractPath, true);
                Logger.LogInformation("Đã xóa thư mục giải nén cũ: {ExtractPath}", extractPath);
            }

            // Tạo thư mục mới
            Directory.CreateDirectory(extractPath);
            Logger.LogInformation("Đã tạo thư mục giải nén: {ExtractPath}", extractPath);

            // Giải nén file ZIP vào thư mục dựa trên Slug
            ZipFile.ExtractToDirectory(zipPath, extractPath, true);
            Logger.LogInformation("Đã giải nén file ZIP vào: {ExtractPath}", extractPath);

            // Tìm file DLL và JSON
            var dllFiles = Directory.GetFiles(extractPath, "*.dll", SearchOption.AllDirectories);
var jsonFiles = Directory.GetFiles(extractPath, "*.json", SearchOption.AllDirectories);
Logger.LogInformation("Tìm thấy {DllCount} file DLL và {JsonCount} file JSON trong tất cả thư mục con", dllFiles.Length, jsonFiles.Length);

            if (dllFiles.Length == 1 && jsonFiles.Length == 1)
            {
                var dllPath = dllFiles[0];
                var configPath = jsonFiles[0];
                Logger.LogInformation("Đường dẫn DLL: {DllPath}, Đường dẫn Config: {ConfigPath}", dllPath, configPath);

                await ReadConfigFile(configPath);

                var group = await DbContext.ToolGroups.FirstOrDefaultAsync(g => g.Name == tempGroupName);
                if (group == null)
                {
                    group = new ToolGroup
                    {
                        Id = Guid.NewGuid().ToString(),
                        Name = tempGroupName ?? "Default Group Name",
                        Description = "Auto-generated group"
                    };
                    DbContext.ToolGroups.Add(group);
                    await DbContext.SaveChangesAsync();
                    Logger.LogInformation("Đã tạo ToolGroup mới: {GroupName}", group.Name);
                }
                else
                {
                    Logger.LogInformation("Sử dụng ToolGroup hiện có: {GroupName}", group.Name);
                }
                newTool.GroupId = group.Id;

                newTool.DllPath = dllPath;
                newTool.ConfigPath = configPath;
                newTool.ToolKey = Guid.NewGuid().ToString();
                newTool.ToolUrl = $"/tools/{newTool.ToolKey}";

                DbContext.Tools.Add(newTool);
                await DbContext.SaveChangesAsync();
                Logger.LogInformation("Đã thêm Tool vào cơ sở dữ liệu: {ToolName}", newTool.Name);

                // Xóa file ZIP với kiểm tra lỗi
                try
                {
                    File.Delete(zipPath);
                    Logger.LogInformation("Đã xóa file ZIP: {ZipPath}", zipPath);
                }
                catch (IOException ex)
                {
                    Logger.LogWarning("Không thể xóa file ZIP {ZipPath}: {Error}. Có thể file đang bị khóa.", zipPath, ex.Message);
                }
                catch (UnauthorizedAccessException ex)
                {
                    Logger.LogError("Không có quyền xóa file ZIP {ZipPath}: {Error}", zipPath, ex.Message);
                }

                newTool = new Tool();
                selectedFile = null;
                tempGroupName = null;
            }
            else
            {
                Logger.LogWarning("File ZIP không hợp lệ: Tìm thấy {DllCount} file DLL và {JsonCount} file JSON. Cần đúng một file mỗi loại.", dllFiles.Length, jsonFiles.Length);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Lỗi khi xử lý file ZIP: {FileName}", selectedFile?.Name);
        }
        finally
        {
            File.Delete(zipPath);
            Logger.LogInformation("Đã xóa file ZIP: {ZipPath}", zipPath);
            // Đảm bảo giải phóng tài nguyên
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }
    }
    else
    {
        Logger.LogWarning("Không có file nào được chọn.");
    }
}

    // Hàm để đọc Slug từ file JSON trong ZIP
private async Task<string?> GetSlugFromZip(string zipPath)
{
    try
    {
        using (var zip = ZipFile.OpenRead(zipPath))
        {
            var jsonEntry = zip.Entries.FirstOrDefault(e => e.FullName.EndsWith(".json"));
            if (jsonEntry != null)
            {
                using (var stream = jsonEntry.Open())
                using (var reader = new StreamReader(stream))
                {
                    var jsonContent = await reader.ReadToEndAsync();
                    var config = JsonSerializer.Deserialize<ToolConfig>(jsonContent);
                    Logger.LogInformation("Đã đọc Slug từ file JSON trong ZIP: {Slug}", config?.Slug);
                    return config?.Slug;
                }
            }
            else
            {
                Logger.LogWarning("Không tìm thấy file JSON trong ZIP: {ZipPath}", zipPath);
                return null;
            }
        }
    }
    catch (Exception ex)
    {
        Logger.LogError(ex, "Lỗi khi đọc Slug từ ZIP: {ZipPath}", zipPath);
        return null;
    }
    finally
    {
        // Đảm bảo không còn tham chiếu nào tới file ZIP
        GC.Collect();
        GC.WaitForPendingFinalizers();
    }
}

    private async Task ReadConfigFile(string configPath)
    {
        try
        {
            var jsonContent = await File.ReadAllTextAsync(configPath);
            var config = JsonSerializer.Deserialize<ToolConfig>(jsonContent);
            Logger.LogInformation("Đã đọc file config: {ConfigPath}", configPath);

            if (config != null)
            {
                newTool.Name = config.Name;
                newTool.Description = config.Description;
                newTool.Slug = config.Slug;
                newTool.Icon = config.Icon;
                tempGroupName = config.Group;
                Logger.LogInformation("Đã tải cấu hình Tool: Name={Name}, Group={Group}", config.Name, config.Group);
            }
            else
            {
                Logger.LogWarning("Không thể deserialize file config: {ConfigPath}", configPath);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Lỗi khi đọc file config: {ConfigPath}", configPath);
        }
    }

    public class ToolConfig
    {
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Group { get; set; }
        public string? TypeName { get; set; }
        public string? Namespace { get; set; }
        public string? Slug { get; set; }
        public string? Icon { get; set; }
    }
}