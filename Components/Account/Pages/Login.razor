@page "/login122"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using it_tools.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<button class="mb-4 w-10 h-10 flex items-center justify-center bg-white rounded-full shadow-md">
    <HeroIcon Name="arrow-left-square" class="w-6 h-6 text-black" />
</button>
<h1 class="text-3xl font-bold text-black mb-6">Welcome back! Glad to see you, Again!</h1>
<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <div class="mb-4">
        <InputText @bind-Value="Input.Email"
            class="w-full bg-gray-100 border border-gray-300 rounded-md p-3 text-gray-500" autocomplete="username"
            aria-required="true" placeholder="Enter your email" />
    </div>
    <ValidationMessage For="() => Input.Email" class="text-red-300" />
    <div class="relative mb-4">
        <input type="@(isEyeOpen ? "text" : "password")" value="@Input.Password" @oninput="HandlePasswordChange"
            class="w-full bg-gray-100 border border-gray-300 rounded-md p-3 text-gray-500"
            autocomplete="current-password" aria-required="true" placeholder="Enter your password" />
        <div class="absolute right-3 top-1/2 transform -translate-y-1/2" @onclick="ToggleEye" type="button">
            <HeroIcon Name="@(isEyeOpen ? "eye" : "eye-slash-fill")" class="w-5 h-5 text-gray-500" />
        </div>
    </div>
    <ValidationMessage For="() => Input.Password" class="text-red-300" />
    <div class="text-right mb-4">
        <a href="/forgot-password" class="text-sm text-blue-600 hover:underline">Forgot password?</a>
    </div>
    <div class="text-left mb-4">
        <label class="form-label">
            <InputCheckbox @bind-Value="Input.RememberMe"
                class="w-4 h-4 text-black border-gray-300 rounded focus:ring focus:ring-black" />
            Remember me
        </label>
    </div>
    <StatusMessage Message="@errorMessage" />
    <button type="submit" class="w-full bg-black text-white rounded-md p-4 font-bold mb-4">Login</button>
</EditForm>
<div class="text-center my-4">
    <span class="text-sm text-gray-500">Or Login with</span>
</div>
<div class="flex justify-center gap-4">
    <button class="w-10 h-10 flex items-center justify-center bg-white border border-gray-300 rounded-md">
        <span class="text-blue-600">F</span>
    </button>
    <button class="w-10 h-10 flex items-center justify-center bg-white border border-gray-300 rounded-md">
        <span class="text-red-500">G</span>
    </button>
    <button class="w-10 h-10 flex items-center justify-center bg-white border border-gray-300 rounded-md">
        <span class="text-black">A</span>
    </button>
</div>
<div class="text-center mt-4">
    <p>
        <a href="Account/ForgotPassword">Forgot your password?</a>
    </p>
    <p>
        <a
            href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register
            as a new user</a>
    </p>
    <p>
        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
    </p>
</div>
<div class="text-center mt-4">
    <span class="text-sm text-gray-500">Don't have an account? </span>
    <a href="/signup" class="text-sm text-teal-500 hover:underline">Register Now</a>
</div>

@code {
    private string? errorMessage;
    private bool isEyeOpen = false;

    private void ToggleEye()
    {
        isEyeOpen = true;
        errorMessage = "Hello";
    }

    private void HandlePasswordChange(ChangeEventArgs e)
    {
        Input.Password = e.Value?.ToString() ?? "";
    }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}