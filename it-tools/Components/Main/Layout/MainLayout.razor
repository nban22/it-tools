@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using it_tools.Components.Main.Components
@inject NavigationManager NavigationManager
@using it_tools.Data.Services
@using it_tools.Data.Repositories
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@inject IUserRepository UserRepository

@implements IAsyncDisposable

<PageTitle>IT-Tools</PageTitle>

<!-- Add reference to our JavaScript file -->
<HeadContent>
    <script src="js/search.js"></script>
</HeadContent>

<div class="flex h-screen w-screen bg-gray-100">
    <!-- Sidebar Container -->
    <div class="@GetSidebarClass() border-r border-gray-200">
        <NavMenu />
    </div>

    <main class="flex-1 flex min-h-0 flex-col">
        <!-- Topbar -->
        <div class="h-16 bg-white shadow-sm flex justify-between items-center px-6">
            <div class="flex items-center space-x-2">
                <button @onclick="ToggleSidebar" 
                        class="p-2 text-gray-600 hover:text-teal-600 rounded-full hover:bg-gray-100 transition-colors duration-150">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                </button>
                
                <!-- Home Button -->
                <button @onclick=@(() => NavigationManager.NavigateTo("/", true))
                        class="p-2 text-gray-600 hover:text-teal-600 rounded-full hover:bg-gray-100 transition-colors duration-150 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                    </svg>
                    <span class="ml-1 text-sm hidden md:inline">Home</span>
                </button>
                
                <div class="ml-1">
                    <SearchBox />
                </div>
            </div>

            <AuthorizeView>
                <Authorized>
                    <div class="flex items-center space-x-3">
                        @if (!userIsPremium)
                        {
                            <button @onclick="ShowPaymentModal" class="flex items-center bg-gradient-to-r from-amber-500 to-amber-600 text-white px-3 py-1.5 rounded-md hover:from-amber-600 hover:to-amber-700 transition-colors font-medium text-sm shadow-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                                </svg>
                                <span class="hidden sm:inline">Upgrade to Premium</span>
                                <span class="sm:hidden">Upgrade</span>
                            </button>
                        }
                        else
                        {
                            <div class="flex items-center bg-amber-100 text-amber-800 px-3 py-1.5 rounded-md font-medium text-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                </svg>
                                <span class="hidden sm:inline">Premium Member</span>
                                <span class="sm:hidden">Premium</span>
                            </div>
                        }

                        <div class="hidden md:flex items-center">
                            <div class="h-8 w-8 rounded-full bg-teal-100 flex items-center justify-center text-teal-600 font-semibold">
                                @(context.User?.Identity?.Name?[0].ToString().ToUpper() ?? "U")
                            </div>
                            <span class="ml-2 text-gray-700 font-medium">@context.User?.Identity?.Name</span>
                        </div>
                        <div>
                            <button @onclick=@(() => NavigationManager.NavigateTo("/logout", true))
                                    class="bg-gray-700 text-white px-4 py-2 rounded-md hover:bg-gray-800
                                           transition-colors duration-150 font-medium text-sm shadow-sm">
                                <span class="hidden sm:inline">Logout</span>
                                <span class="sm:hidden">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm11 3a1 1 0 10-2 0v6.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L14 12.586V6z" clip-rule="evenodd" />
                                    </svg>
                                </span>
                            </button>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="flex items-center space-x-3">
                        <button class="bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700
                                   transition-colors duration-150 font-medium text-sm shadow-sm"
                                @onclick=@(() => NavigationManager.NavigateTo("/login"))>
                            <span class="hidden sm:inline">Login</span>
                            <span class="sm:hidden">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm11 3a1 1 0 10-2 0v6.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L14 12.586V6z" clip-rule="evenodd" />
                                </svg>
                            </span>
                        </button>
                        <button class="bg-gray-700 text-white px-4 py-2 rounded-md hover:bg-gray-800
                                   transition-colors duration-150 font-medium text-sm shadow-sm"
                                @onclick=@(() => NavigationManager.NavigateTo("/signup"))>
                            <span class="hidden sm:inline">Signup</span>
                            <span class="sm:hidden">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6z" />
                                </svg>
                            </span>
                        </button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <!-- Content Area -->
        <div class="flex-1 overflow-y-auto p-6 bg-gray-50">
            @Body
        </div>
    </main>
</div>

<!-- Payment Modal -->
@if (showPaymentModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md overflow-hidden">
            @if (paymentProcessing)
            {
                <!-- Processing Payment UI -->
                <div class="p-6 text-center">
                    <div class="inline-flex items-center justify-center w-16 h-16 bg-amber-100 rounded-full mb-4">
                        <div class="w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full animate-spin"></div>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Processing Payment</h3>
                    <p class="text-gray-600 mb-4">Please wait while we process your payment...</p>
                    <div class="w-full bg-gray-200 rounded-full h-2.5 mb-2">
                        <div class="bg-amber-500 h-2.5 rounded-full" style="width: @(100 - (countdownSeconds * 33))%"></div>
                    </div>
                    <p class="text-sm text-gray-500">@countdownSeconds seconds remaining</p>
                </div>
            }
            else if (paymentSuccess)
            {
                <!-- Payment Success UI -->
                <div class="p-6 text-center">
                    <div class="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                        </svg>
                    </div>
                    <h3 class="text-xl font-bold text-gray-800 mb-2">Payment Successful!</h3>
                    <p class="text-gray-600 mb-6">Your account has been upgraded to Premium.</p>
                    <div class="bg-green-50 border border-green-100 rounded-lg p-4 mb-6 text-left">
                        <h4 class="font-medium text-green-800 mb-2">Premium Benefits Activated:</h4>
                        <ul class="space-y-2">
                            <li class="flex items-start">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                                <span>Access to all premium tools</span>
                            </li>
                            <li class="flex items-start">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                                <span>Priority support</span>
                            </li>
                            <li class="flex items-start">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                                <span>Ad-free experience</span>
                            </li>
                        </ul>
                    </div>
                    <button @onclick="ReturnToPreviousPage" 
                            class="w-full px-4 py-2 bg-teal-600 text-white rounded-md hover:bg-teal-700 transition-colors">
                        Return to Previous Page
                    </button>
                </div>
            }
            else
            {
                <!-- Payment Form UI -->
                <div class="bg-gradient-to-r from-amber-500 to-amber-600 p-4">
                    <div class="flex items-center justify-between">
                        <h3 class="text-xl font-bold text-white">Upgrade to Premium</h3>
                        <button @onclick="ClosePaymentModal" class="text-white hover:text-amber-200 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="p-6">
                    <div class="bg-amber-50 rounded-lg p-4 mb-6">
                        <h4 class="font-semibold text-amber-800 mb-2">Premium Plan - $9.99/month</h4>
                        <ul class="space-y-2">
                            <li class="flex items-start">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-amber-600 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                                <span>Access to all premium tools</span>
                            </li>
                            <li class="flex items-start">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-amber-600 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                                <span>Priority support and advanced features</span>
                            </li>
                            <li class="flex items-start">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-amber-600 mr-2 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                </svg>
                                <span>Ad-free experience</span>
                            </li>
                        </ul>
                    </div>
                    
                    <div class="space-y-4 mb-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Card Number</label>
                            <div class="relative">
                                <input type="text" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-teal-500 focus:border-teal-500" 
                                        placeholder="1234 5678 9012 3456" value="4242 4242 4242 4242" readonly />
                                <div class="absolute inset-y-0 right-0 flex items-center pr-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                                    </svg>
                                </div>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">Expiration Date</label>
                                <input type="text" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-teal-500 focus:border-teal-500" 
                                        placeholder="MM/YY" value="12/25" readonly />
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">CVV</label>
                                <input type="text" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-teal-500 focus:border-teal-500" 
                                        placeholder="123" value="123" readonly />
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Cardholder Name</label>
                            <input type="text" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-teal-500 focus:border-teal-500" 
                                    placeholder="John Doe" value="Demo User" readonly />
                        </div>
                    </div>
                    
                    <div class="text-xs text-gray-500 mb-6">
                        <p>This is a simulated payment form. In a real application, we would integrate with a payment processor.</p>
                        <p class="mt-1">For this demo, we're using placeholder data. Click the button below to simulate payment.</p>
                    </div>
                    
                    <button @onclick="ProcessPayment" 
                            class="w-full px-4 py-2 bg-gradient-to-r from-amber-500 to-amber-600 text-white rounded-md hover:from-amber-600 hover:to-amber-700 transition-colors">
                        Upgrade Now - $9.99/month
                    </button>
                </div>
            }
        </div>
    </div>
}

@code {
    private bool isSidebarOpen = true;
    private bool isMobile = false;
    private string? currentUserId;
    private bool userIsPremium = false;
    
    // Payment modal states
    private bool showPaymentModal = false;
    private bool paymentProcessing = false;
    private bool paymentSuccess = false;
    private int countdownSeconds = 3;
    private string previousUrl = "/";
    
    // Check if we're on mobile after the component renders
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && JS != null)
        {
            try
            {
                isMobile = await JS.InvokeAsync<bool>("eval", "window.innerWidth < 768");
                StateHasChanged();
                
                // Set up resize listener
                await JS.InvokeVoidAsync("eval", @"
                    window.addEventListener('resize', function() {
                        DotNet.invokeMethod('it_tools', 'UpdateIsMobile', window.innerWidth < 768);
                    });
                ");
                
                // Store current URL for returning after payment
                previousUrl = NavigationManager.Uri;
            }
            catch
            {
                // Fallback to desktop view if there's an error
                isMobile = false;
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CheckUserPremiumStatus();
    }
    
    private async Task CheckUserPremiumStatus()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated ?? false)
            {
                currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(currentUserId))
                {
                    var userData = await UserRepository.GetUserById(currentUserId);
                    userIsPremium = userData?.IsPremium ?? false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking premium status: {ex.Message}");
            userIsPremium = false;
        }
    }
    
    [JSInvokable("UpdateIsMobile")]
    public static void UpdateMobileState(bool mobile)
    {
        if (_instance != null)
        {
            _instance.isMobile = mobile;
            _instance.StateHasChanged();
        }
    }
    
    // Static reference to the current instance
    private static MainLayout? _instance;
    
    protected override void OnInitialized()
    {
        _instance = this;
        base.OnInitialized();
    }

    private string GetSidebarClass()
    {
        return isMobile
            ? $"fixed inset-y-0 left-0 w-72 bg-white shadow-lg transform transition-transform duration-300 ease-in-out z-50 {(isSidebarOpen ? "translate-x-0" : "-translate-x-full")}"
            : $"bg-white h-screen w-72 {(isSidebarOpen ? "shadow-lg" : "hidden")}";
    }

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }
    
    private void ShowPaymentModal()
    {
        // Store current URL for returning after payment
        previousUrl = NavigationManager.Uri;
        showPaymentModal = true;
        paymentProcessing = false;
        paymentSuccess = false;
    }
    
    private void ClosePaymentModal()
    {
        showPaymentModal = false;
        paymentProcessing = false;
        paymentSuccess = false;
    }
    
    private async Task ProcessPayment()
    {
        paymentProcessing = true;
        countdownSeconds = 3;
        
        // Simulate payment processing with countdown
        for (int i = 0; i < 3; i++)
        {
            await Task.Delay(1000);
            countdownSeconds--;
            StateHasChanged();
        }
        
        // Update user to premium status in database
        if (!string.IsNullOrEmpty(currentUserId))
        {
            try
            {
                await UserRepository.SetUserPremiumStatus(currentUserId, true);
                userIsPremium = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating premium status: {ex.Message}");
            }
        }
        
        // Show success
        paymentProcessing = false;
        paymentSuccess = true;
    }
    
    private void ReturnToPreviousPage()
    {
        ClosePaymentModal();
        NavigationManager.NavigateTo(previousUrl, true);
    }

    [Inject]
    private IJSRuntime? JS { get; set; }
    
    public async ValueTask DisposeAsync()
    {
        // Clean up any resources when the component is disposed
        if (JS != null)
        {
            try
            {
                await JS.InvokeVoidAsync("eval", "window.toggleSearch = undefined;");
            }
            catch
            {
                // Ignore errors during disposal
            }
        }
    }
}

