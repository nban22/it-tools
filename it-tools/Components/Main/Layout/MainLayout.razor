@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using it_tools.Components.Main.Components
@inject NavigationManager NavigationManager
@using it_tools.Data.Repositories
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject IUserRepository UserRepository

<PageTitle>IT-Tools</PageTitle>

<div class="flex h-screen w-screen bg-gray-100">
    <div class="@GetSidebarClass() border-r border-gray-200">
        <NavMenu />
    </div>

    <main class="flex-1 flex min-h-0 flex-col">
        <div class="h-16 bg-white shadow-sm flex justify-between items-center px-6">
            <div class="flex items-center space-x-2">
                <button @onclick="ToggleSidebar" 
                        class="p-2 text-gray-600 hover:text-teal-600 rounded-full hover:bg-gray-100 transition-colors duration-150">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                    </svg>
                </button>
                
                <button @onclick=@(() => NavigationManager.NavigateTo("/", true))
                        class="p-2 text-gray-600 hover:text-teal-600 rounded-full hover:bg-gray-100 transition-colors duration-150 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                    </svg>
                    <span class="ml-1 text-sm hidden md:inline">Home</span>
                </button>
                
                <div class="ml-1">
                    <SearchBox />
                </div>
            </div>

            <AuthorizeView>
                <Authorized>
                    <div class="flex items-center space-x-3">
                        @if (context.User?.IsInRole("Admin") ?? false)
                        {
                            <button @onclick=@(() => NavigationManager.NavigateTo("/admin/dashboard"))
                                    class="flex items-center bg-gradient-to-r from-purple-500 to-purple-600 text-white px-3 py-1.5 rounded-md hover:from-purple-600 hover:to-purple-700 transition-colors font-medium text-sm shadow-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                </svg>
                                <span class="hidden sm:inline">Admin Dashboard</span>
                                <span class="sm:hidden">Admin</span>
                            </button>
                        }
                        else if (!userIsPremium)
                        {
                            <button @onclick="ShowPaymentModal" class="flex items-center bg-gradient-to-r from-amber-500 to-amber-600 text-white px-3 py-1.5 rounded-md hover:from-amber-600 hover:to-amber-700 transition-colors font-medium text-sm shadow-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                                </svg>
                                <span class="hidden sm:inline">Upgrade to Premium</span>
                                <span class="sm:hidden">Upgrade</span>
                            </button>
                        }
                        else
                        {
                            <div class="flex items-center bg-amber-100 text-amber-800 px-3 py-1.5 rounded-md font-medium text-sm">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                                </svg>
                                <span class="hidden sm:inline">Premium Member</span>
                                <span class="sm:hidden">Premium</span>
                            </div>
                        }

                        <div class="hidden md:flex items-center">
                            <div class="h-8 w-8 rounded-full bg-teal-100 flex items-center justify-center text-teal-600 font-semibold">
                                @(context.User?.Identity?.Name?[0].ToString().ToUpper() ?? "U")
                            </div>
                            <span class="ml-2 text-gray-700 font-medium">@context.User?.Identity?.Name</span>
                        </div>
                        <div>
                            <button @onclick=@(() => NavigationManager.NavigateTo("/logout", true))
                                    class="bg-gray-700 text-white px-4 py-2 rounded-md hover:bg-gray-800
                                           transition-colors duration-150 font-medium text-sm shadow-sm">
                                <span class="hidden sm:inline">Logout</span>
                                <span class="sm:hidden">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm11 3a1 1 0 10-2 0v6.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L14 12.586V6z" clip-rule="evenodd" />
                                    </svg>
                                </span>
                            </button>
                        </div>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <div class="flex items-center space-x-3">
                        <button class="bg-teal-600 text-white px-4 py-2 rounded-md hover:bg-teal-700
                                   transition-colors duration-150 font-medium text-sm shadow-sm"
                                @onclick=@(() => NavigationManager.NavigateTo("/login"))>
                            <span class="hidden sm:inline">Login</span>
                            <span class="sm:hidden">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V4a1 1 0 00-1-1H3zm11 3a1 1 0 10-2 0v6.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L14 12.586V6z" clip-rule="evenodd" />
                                </svg>
                            </span>
                        </button>
                        <button class="bg-gray-700 text-white px-4 py-2 rounded-md hover:bg-gray-800
                                   transition-colors duration-150 font-medium text-sm shadow-sm"
                                @onclick=@(() => NavigationManager.NavigateTo("/signup"))>
                            <span class="hidden sm:inline">Signup</span>
                            <span class="sm:hidden">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M8 9a3 3 0 100-6 3 3 0 000 6zM8 11a6 6 0 016 6H2a6 6 0 016-6z" />
                                </svg>
                            </span>
                        </button>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <div class="flex-1 overflow-y-auto p-6 bg-gray-50">
            @Body
        </div>
    </main>
</div>

@if (showPaymentModal)
{
    <it_tools.Components.Main.Shared.UpgradeModal 
        CurrentUserId="@currentUserId"
        OnClose="ClosePaymentModal"
        OnSuccess="ReturnToPreviousPage" />
}

@code {
    private bool isSidebarOpen = true;
    private string? currentUserId;
    private bool userIsPremium = false;
    private bool showPaymentModal = false;
    private string previousUrl = "/";
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await CheckUserPremiumStatus();
    }
    
    private async Task CheckUserPremiumStatus()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated ?? false)
            {
                currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                
                if (!string.IsNullOrEmpty(currentUserId))
                {
                    var userData = await UserRepository.GetUserById(currentUserId);
                    userIsPremium = userData?.IsPremium ?? false;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking premium status: {ex.Message}");
            userIsPremium = false;
        }
    }

    private string GetSidebarClass()
    {
        return $"bg-white h-screen w-72 {(isSidebarOpen ? "shadow-lg" : "hidden")}";
    }

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
    }
    
    private void ShowPaymentModal()
    {
        previousUrl = NavigationManager.Uri;
        showPaymentModal = true;
    }
    
    private void ClosePaymentModal()
    {
        showPaymentModal = false;
    }
    
    private void ReturnToPreviousPage()
    {
        ClosePaymentModal();
        NavigationManager.NavigateTo(previousUrl, true);
    }
}