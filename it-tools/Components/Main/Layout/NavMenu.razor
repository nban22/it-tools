@implements IDisposable

@using it_tools.Data.DTOs
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IToolRepository ToolRepository
@using System.Security.Claims
@using it_tools.Data.Repositories
@using it_tools.Data.Services
@inject ILogger<NavMenu> _logger
@inject ToolStateService ToolStateService
@inject IJSRuntime JSRuntime

<!-- Header with wave effect -->
<div class="wave-container relative overflow-hidden bg-gradient-to-r from-teal-600 to-green-500 shadow-lg w-full">
    <div class="px-5 py-6 z-10 relative">
        <h1 class="text-3xl font-extrabold tracking-tight text-white uppercase cursor-pointer text-center" 
            @onclick=@(() => NavigationManager.NavigateTo("/"))>
            IT - TOOLS
        </h1>
        <p class="mt-1 text-sm font-medium text-teal-100 opacity-90 text-center">
            Handy tools for developers
        </p>
    </div>
    
    <!-- Wave effect -->
    <div class="wave"></div>
</div>

<!-- Menu -->
<div class="flex-1 overflow-y-auto bg-white sidebar-scrollbar">
    @if (DisplayToolGroups != null)
    {
        @foreach (var group in DisplayToolGroups)
        {
            <div class="mb-1 last:mb-0">
                <!-- Group Header -->
                <button @onclick="() => ToggleGroup(group)"
                    class="w-full flex items-center px-6 py-3 text-gray-700 focus:outline-none transition-colors duration-150 ease-in-out hover:bg-gray-50">
                    <div class="flex items-center">
                        <svg class="@(group.IsExpanded ? "transform rotate-90" : "") w-4 h-4 text-gray-400 transition-transform duration-200 mr-2 group-chevron"
                            fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                        <span class="font-medium text-sm text-gray-500">@group.Name</span>
                    </div>
                </button>

                <!-- Group Items -->
                @if (group.IsExpanded)
                {
                    <div class="pl-8 py-1 space-y-1">
                        @if (group.Tools != null)
                        {
                            @foreach (var tool in group.Tools)
                            {
                                <a @onclick=@(() => NavigationManager.NavigateTo($"tools/{tool.Slug}", true))
                                    class="flex items-center px-4 py-2.5 rounded-lg text-gray-700 hover:bg-gray-50 hover:text-teal-600 transition-all duration-150 ease-in-out cursor-pointer menu-item-hover">
                                    @if (!string.IsNullOrEmpty(tool.Icon))
                                    {
                                        <span class="mr-3 text-lg w-5 text-center text-gray-500 group-hover:text-teal-500 tool-icon">@tool.Icon</span>
                                    }
                                    <span class="text-sm font-medium">@tool.Name</span>
                                </a>
                            }
                        }
                    </div>
                }
            </div>
        }
    }
    
    <!-- Bottom information -->
    <div class="mt-auto border-t border-gray-100 p-4">
        <div class="text-xs text-gray-500 text-center">
            <p>© 2025 IT-Tools</p>
            <p class="mt-1">All tools in one place</p>
        </div>
    </div>
</div>

@code {
    private bool isLoggedIn;
    private string? currentUserId;
    private List<ToolGroupDto>? ToolGroups;
    private List<ToolGroupDto>? DisplayToolGroups;
    private const string LocalStorageKey = "it_tools_expanded_groups";

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to tool favorite changes
        ToolStateService.OnToolFavoriteChanged += HandleToolFavoriteChanged;

        await LoadToolGroups();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && DisplayToolGroups != null)
        {
            // Load expanded state from localStorage after first render
            await LoadExpandedStatesFromLocalStorage();
        }
    }

    private async Task LoadExpandedStatesFromLocalStorage()
    {
        try
        {
            // Read saved states from localStorage
            var expandedGroupsJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", LocalStorageKey);
            
            if (!string.IsNullOrEmpty(expandedGroupsJson))
            {
                var expandedGroups = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, bool>>(expandedGroupsJson);
                
                if (expandedGroups != null && DisplayToolGroups != null)
                {
                    foreach (var group in DisplayToolGroups)
                    {
                        if (!string.IsNullOrEmpty(group.Name) && expandedGroups.TryGetValue(group.Name, out bool isExpanded))
                        {
                            group.IsExpanded = isExpanded;
                        }
                    }
                    
                    // Force UI update
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to load expanded states from localStorage");
        }
    }
    
    private async Task SaveExpandedStatesToLocalStorage()
    {
        try
        {
            if (DisplayToolGroups != null)
            {
                var expandedGroups = DisplayToolGroups
                    .Where(group => !string.IsNullOrEmpty(group.Name))
                    .ToDictionary(
                        group => group.Name!,
                        group => group.IsExpanded
                    );
                
                var expandedGroupsJson = System.Text.Json.JsonSerializer.Serialize(expandedGroups);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", LocalStorageKey, expandedGroupsJson);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to save expanded states to localStorage");
        }
    }

    private async Task LoadToolGroups()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isLoggedIn = user.Identity?.IsAuthenticated ?? false;

        if (isLoggedIn)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(currentUserId))
            {
                ToolGroups = await ToolRepository.GetAllToolGroups();
                var FavoriteGroup = await ToolRepository.GetFavoriteToolGroup(currentUserId);
                DisplayToolGroups = ToolGroups;
                if (FavoriteGroup != null)
                {
                    DisplayToolGroups.Insert(0, FavoriteGroup);
                }
            }
        }
        else
        {
            DisplayToolGroups = await ToolRepository.GetAllToolGroups();
        }
    }

    private async Task ToggleGroup(ToolGroupDto group)
    {
        group.IsExpanded = !group.IsExpanded;
        await SaveExpandedStatesToLocalStorage();
    }

    // Handle tool favorite changes
    private void HandleToolFavoriteChanged(ToolDto updatedTool)
    {
        if (!isLoggedIn || string.IsNullOrEmpty(currentUserId))
            return;

        try
        {
            // Reload the favorite group to reflect changes
            var FavoriteGroupTask = ToolRepository.GetFavoriteToolGroup(currentUserId);
            FavoriteGroupTask.ContinueWith(async task =>
            {
                if (task.IsCompletedSuccessfully)
                {
                    var FavoriteGroup = task.Result;
                    DisplayToolGroups = ToolGroups;
                    if (FavoriteGroup != null)
                    {
                        if (DisplayToolGroups != null && DisplayToolGroups.Count > 0)
                        {
                            DisplayToolGroups.RemoveAt(0);
                            DisplayToolGroups.Insert(0, FavoriteGroup);
                            
                            // Save the updated states after favorite group changes
                            await SaveExpandedStatesToLocalStorage();
                        }
                    }

                    await InvokeAsync(StateHasChanged); // Force UI update
                }
                else if (task.IsFaulted)
                {
                    _logger.LogError(task.Exception, "Failed to update favorite tools in NavMenu");
                }
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to update favorite tools in NavMenu");
        }
    }

    public void Dispose()
    {
        // Unsubscribe when component is disposed
        ToolStateService.OnToolFavoriteChanged -= HandleToolFavoriteChanged;
    }
}