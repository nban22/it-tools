@page "/tools/{Slug}"
@inject ToolAssemblyService ToolAssemblyService
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ILogger<ToolsPage> Logger

@using Microsoft.EntityFrameworkCore
@using it_tools.Data
@using System.Reflection

@if (toolComponentType != null)
{
    <DynamicComponent Type="toolComponentType" />
}
else
{
    <div class="p-4 bg-white rounded-lg shadow-md">
        <div class="flex items-center text-red-500 mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
            </svg>
            <h3 class="text-lg font-medium">Tool không khả dụng</h3>
        </div>
        <p class="text-gray-600">Có lỗi xảy ra khi tải tool. Vui lòng thử lại sau hoặc liên hệ admin.</p>
        @if (loadError != null)
        {
            <div class="mt-4 p-3 bg-red-50 text-red-700 rounded-md text-sm">
                @loadError
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public string? Slug { get; set; }

    private Type? toolComponentType;
    private string? loadError;

    protected override async Task OnInitializedAsync()
    {
        try {
            using var context = await DbContextFactory.CreateDbContextAsync();
            var tool = await context.Tools.FirstOrDefaultAsync(t => t.Slug == Slug);
            
            if (tool == null)
            {
                loadError = $"Tool with slug '{Slug}' does not exist.";
                return;
            }
            
            Assembly assembly;
            if (!string.IsNullOrEmpty(tool.DllPath))
            {
                // Nếu lưu trong file system
                assembly = ToolAssemblyService.LoadToolAssembly(tool.DllPath);
            }
            else
            {
                loadError = "The tool is not properly configured.";
                return;
            }
            
            // Find the component type based on the slug - no need for TypeName or Namespace
            toolComponentType = ToolAssemblyService.FindToolComponentType(assembly, Slug ?? string.Empty);
            
            if (toolComponentType == null)
            {
                loadError = "The tool component could not be found in the DLL.";
            }
        }
        catch (Exception ex)
        {
            loadError = $"Error: {ex.Message}";
            Logger.LogError(ex, $"Error while loading tool '{Slug}'");
        }
    }
}