@using it_tools.Data.Repositories
@using it_tools.Data.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using it_tools.Data.Services
@inject NavigationManager NavigationManager
@inject IUserRepository UserRepository
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ToolStateService ToolStateService
@using System.Security.Claims

<div class="bg-white border border-gray-200 shadow-sm rounded-lg p-4 flex items-start justify-between hover:shadow-md transition-shadow cursor-pointer"
     @onclick="OnToolClick">
    <div class="flex items-start space-x-3">
        @((MarkupString)(Tool?.Icon ?? string.Empty))
        <div>
            <h3 class="text-lg font-semibold text-gray-800">@Tool?.Name</h3>
            <p class="text-sm text-gray-500">@Tool?.Description</p>
        </div>
    </div>
    <button class="flex items-center space-x-2" 
            @onclick="HandleFavoriteClick" 
            @onclick:stopPropagation>
        <svg class="w-5 h-5 @(Tool?.IsFavorite == true ? "text-green-500" : "text-gray-300")"
             fill="currentColor" 
             viewBox="0 0 24 24" 
             xmlns="http://www.w3.org/2000/svg">
            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
        </svg>
    </button>
</div>

@if (showModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-96">
            <h3 class="text-lg font-semibold text-gray-800">Login Required</h3>
            <p class="text-sm text-gray-600 mt-2">You need to log in to add tools to your favorites list. Would you like to log in now?</p>
            <div class="mt-4 flex justify-end space-x-2">
                <button class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
                        @onclick="CloseModal">Cancel</button>
                <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600" 
                        @onclick="RedirectToLogin">Login</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public ToolDto? Tool { get; set; }

    [Parameter]
    public EventCallback OnToolClick { get; set; }

    private bool showModal = false;
    private string? currentUserId;
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isLoggedIn = user.Identity?.IsAuthenticated ?? false;

        if (isLoggedIn)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (Tool is ToolDto dto && !string.IsNullOrEmpty(currentUserId))
            {
                try
                {
                    var favoriteTools = await UserRepository.GetFavoriteTools(currentUserId);
                    dto.IsFavorite = favoriteTools.Any(t => t.Id == dto.Id);
                }
                catch
                {
                    // Consider handling the exception silently or notifying the user if needed
                }
            }
        }
    }

    private async Task HandleFavoriteClick()
    {
        if (!isLoggedIn)
        {
            showModal = true;
            return;
        }

        if (Tool is ToolDto dto && !string.IsNullOrEmpty(currentUserId))
        {
            try
            {
                if (dto.IsFavorite)
                {
                    await UserRepository.RemoveFavoriteTool(currentUserId, dto.Id);
                    dto.IsFavorite = false;
                }
                else
                {
                    await UserRepository.AddFavoriteTool(currentUserId, dto.Id);
                    dto.IsFavorite = true;
                }
                
                // Notify other components that the tool's favorite status has changed
                ToolStateService.NotifyToolFavoriteChanged(dto);
                
                StateHasChanged();
            }
            catch
            {
                // Consider handling the exception silently or notifying the user if needed
            }
        }
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void RedirectToLogin()
    {
        showModal = false;
        NavigationManager.NavigateTo("/login");
    }
}