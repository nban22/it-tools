@page "/admin/tools"
@layout it_tools.Components.Admin.Layout.AdminLayout
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<it_tools.Data.ApplicationDbContext> DbContextFactory
@inject it_tools.Data.Services.IToolService ToolService
@inject NavigationManager NavigationManager
@using it_tools.Data.Models

<div class="max-w-6xl mx-auto p-6">
    <div class="flex flex-col sm:flex-row justify-between items-center mb-8 gap-4">
        <h3 class="text-2xl font-bold text-gray-900 tracking-tight animate-fade-in">Tools List</h3>
        <div class="flex items-center gap-4">
            <div class="relative">
                <input type="text" 
                       @bind="searchQuery" 
                       @bind:event="oninput" 
                       placeholder="Search tools..." 
                       class="pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 bg-white shadow-sm text-gray-900 placeholder-gray-500 w-full sm:w-64" />
                <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </div>
            <button @onclick="NavigateToAddTool" 
                    class="flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-all duration-300 shadow-sm hover:shadow-md">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                Add Tool
            </button>
        </div>
    </div>

    @if (showMessage)
    {
        <div class="mb-6 p-4 rounded-lg shadow-sm animate-slide-in @(messageIsError ? "bg-red-50 text-red-800 border-l-4 border-red-500" : "bg-green-50 text-green-800 border-l-4 border-green-500")">
            <div class="flex items-center">
                <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(messageIsError ? "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" : "M5 13l4 4L19 7")" />
                </svg>
                <span>@message</span>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-indigo-500"></div>
        </div>
    }
    else
    {
        <div class="bg-white p-6 rounded-2xl shadow-lg animate-fade-in">
            @if (filteredTools?.Any() == true)
            {
                <div class="hidden md:grid grid-cols-4 gap-4 items-center border-b border-gray-200 pb-3 mb-6">
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide">Tool Name</div>
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide">Status</div>
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide">Access</div>
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide text-right">Actions</div>
                </div>
                <ul class="space-y-3">
                    @foreach (var tool in filteredTools)
                    {
                        <li class="grid grid-cols-1 md:grid-cols-4 gap-4 items-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-all duration-300 hover:shadow-sm group">
                            <div class="font-medium text-gray-900 truncate">@tool.Name</div>
                            <div>
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium @(tool.IsEnabled ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800") shadow-sm">
                                    @(tool.IsEnabled ? "Active" : "Inactive")
                                </span>
                            </div>
                            <div>
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium @(tool.IsPremium ? "bg-indigo-100 text-indigo-800" : "bg-gray-100 text-gray-800") shadow-sm">
                                    @(tool.IsPremium ? "Premium" : "Free")
                                </span>
                            </div>
                            <div class="flex justify-end space-x-3">
                                <a href="@($"/admin/tools/detail/{tool.Slug}?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}")" 
                                   class="p-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50 rounded-md transition-all duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                </a>
                                <button @onclick="() => ShowDeleteModal(tool)" 
                                        class="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md transition-all duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5-4h4m-4 4v12m4-12v12" />
                                    </svg>
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="text-center py-8">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                    <p class="mt-2 text-gray-500">No tools found.</p>
                </div>
            }
        </div>
    }
</div>

<!-- Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-md w-full shadow-xl animate-scale-in">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Confirm Deletion</h3>
            <p class="text-gray-600 mb-6">Are you sure you want to delete the tool <span class="font-medium">@(toolToDelete?.Name ?? "Unknown")</span>? This action cannot be undone.</p>
            <div class="flex justify-end space-x-3">
                <button @onclick="HideDeleteModal" 
                        class="px-4 py-2 text-gray-600 hover:text-gray-800 bg-gray-100 hover:bg-gray-200 rounded-md transition-all duration-200">
                    Cancel
                </button>
                <button @onclick="ConfirmDelete" 
                        class="px-4 py-2 text-white bg-red-600 hover:bg-red-700 rounded-md transition-all duration-200">
                    Delete
                </button>
            </div>
        </div>
    </div>
}

<style>
    @@keyframes fadeIn {
        0% { opacity: 0; transform: translateY(10px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    @@keyframes slideIn {
        0% { opacity: 0; transform: translateY(-10px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    @@keyframes scaleIn {
        0% { opacity: 0; transform: scale(0.9); }
        100% { opacity: 1; transform: scale(1); }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-out;
    }

    .animate-slide-in {
        animation: slideIn 0.3s ease-out;
    }

    .animate-scale-in {
        animation: scaleIn 0.3s ease-out;
    }
</style>

@code {
    private bool isLoading = true;
    private List<Tool>? tools;
    private string searchQuery = "";
    private bool showMessage = false;
    private string message = string.Empty;
    private bool messageIsError = false;
    private bool showDeleteModal = false;
    private Tool? toolToDelete;

    private List<Tool>? filteredTools => tools?.Where(t =>
        string.IsNullOrWhiteSpace(searchQuery) ||
        t.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true
    ).ToList();

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        tools = await dbContext.Tools.ToListAsync();
        isLoading = false;
    }

    private void ShowDeleteModal(Tool tool)
    {
        toolToDelete = tool;
        showDeleteModal = true;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
        toolToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (toolToDelete == null) return;

        try
        {
            var success = await ToolService.DeleteToolAsync(toolToDelete.Id);
            if (success)
            {
                tools?.Remove(toolToDelete);
                message = $"Tool '{toolToDelete.Name}' deleted successfully.";
                messageIsError = false;
            }
            else
            {
                message = $"Failed to delete tool '{toolToDelete.Name}'. Please try again.";
                messageIsError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error deleting tool: {ex.Message}";
            messageIsError = true;
        }

        showMessage = true;
        showDeleteModal = false;
        toolToDelete = null;
        StateHasChanged();
    }

    private void NavigateToAddTool()
    {
        NavigationManager.NavigateTo("/admin/tools/add");
    }
}