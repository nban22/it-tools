@page "/admin/tools"
@layout it_tools.Components.Admin.Layout.AdminLayout
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<it_tools.Data.ApplicationDbContext> DbContextFactory
@inject it_tools.Data.Services.IToolService ToolService
@inject NavigationManager NavigationManager
@using it_tools.Data.Models

<div class="p-6 bg-gray-100 min-h-screen">
    <!-- Header -->
    <div class="flex items-center justify-between mb-8 animate-fade-in">
        <h3 class="text-3xl font-extrabold text-gray-900 tracking-tight">Tools List</h3>
        <button @onclick="NavigateToAddTool" class="flex items-center px-5 py-2 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-full hover:from-green-600 hover:to-green-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
            </svg>
            <span class="font-semibold">Add Tool</span>
        </button>
    </div>

    <!-- Message Notification -->
    @if (showMessage)
    {
        <div class="mb-6 p-4 rounded-xl shadow-md animate-slide-in @(messageIsError ? "bg-red-50 text-red-800 border-l-4 border-red-500" : "bg-green-50 text-green-800 border-l-4 border-green-500")">
            <div class="flex items-center">
                <svg class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(messageIsError ? "M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" : "M5 13l4 4L19 7")" />
                </svg>
                <span>@message</span>
            </div>
        </div>
    }

    <!-- Loading Spinner -->
    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
        </div>
    }
    else
    {
        <div class="bg-white p-6 rounded-2xl shadow-xl">
            @if (tools?.Any() == true)
            {
                <ul class="space-y-4">
                    @foreach (var tool in tools)
                    {
                        <li class="grid grid-cols-1 md:grid-cols-3 gap-6 items-center p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-all duration-300 hover:shadow-lg transform hover:-translate-y-0.5 animate-fade-in">
                            <div>
                                <span class="text-gray-800 font-semibold text-lg">@tool.Name</span>
                            </div>
                            <div class="flex space-x-3">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(tool.IsPremium ? "bg-blue-100 text-blue-800" : "bg-gray-100 text-gray-800") shadow-sm">
                                    @(tool.IsPremium ? "Premium" : "Free")
                                </span>
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(tool.IsEnabled ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800") shadow-sm">
                                    @(tool.IsEnabled ? "Active" : "Inactive")
                                </span>
                            </div>
                            <div class="flex justify-end space-x-4">
                                <a href="@($"/admin/tools/detail/{tool.Id}?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}")" class="text-blue-600 hover:text-blue-800 transition-colors duration-200 transform hover:scale-110">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                </a>
                                <button @onclick="() => ShowDeleteModal(tool)" class="text-red-600 hover:text-red-800 transition-colors duration-200 transform hover:scale-110">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5-4h4m-4 4v12m4-12v12" />
                                    </svg>
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-gray-500 text-center py-4">No tools available.</p>
            }
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fade-in">
        <div class="bg-white rounded-2xl shadow-2xl p-6 w-full max-w-md transform transition-all duration-300 scale-100">
            <div class="flex items-center mb-4">
                <svg class="h-6 w-6 text-red-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <h3 class="text-xl font-semibold text-gray-900">Confirm Deletion</h3>
            </div>
            <p class="text-gray-600 mb-6">Are you sure you want to delete the tool "<span class="font-medium">@toolToDelete?.Name</span>"? This action cannot be undone.</p>
            <div class="flex justify-end space-x-3">
                <button @onclick="HideDeleteModal" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-all duration-200">
                    Cancel
                </button>
                <button @onclick="ConfirmDelete" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all duration-200">
                    Delete
                </button>
            </div>
        </div>
    </div>
}

<style>
    /* Custom Animations */
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateY(-20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    .animate-slide-in {
        animation: slideIn 0.5s ease-in-out;
    }
</style>

@code {
    private bool isLoading = true;
    private List<Tool>? tools;
    private bool showMessage = false;
    private string message = string.Empty;
    private bool messageIsError = false;
    private bool showDeleteModal = false;
    private Tool? toolToDelete;

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        tools = await dbContext.Tools.ToListAsync();
        isLoading = false;
    }

    private void ShowDeleteModal(Tool tool)
    {
        toolToDelete = tool;
        showDeleteModal = true;
    }

    private void HideDeleteModal()
    {
        showDeleteModal = false;
        toolToDelete = null;
    }

    private async Task ConfirmDelete()
    {
        if (toolToDelete == null) return;

        try
        {
            var success = await ToolService.DeleteToolAsync(toolToDelete.Id);
            if (success)
            {
                tools?.Remove(toolToDelete);
                message = $"Tool '{toolToDelete.Name}' has been deleted successfully.";
                messageIsError = false;
            }
            else
            {
                message = $"Failed to delete tool '{toolToDelete.Name}'. Please try again.";
                messageIsError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error deleting tool: {ex.Message}";
            messageIsError = true;
        }

        showMessage = true;
        showDeleteModal = false;
        toolToDelete = null;
    }

    private void NavigateToAddTool()
    {
        NavigationManager.NavigateTo("/admin/tools/add");
    }
}