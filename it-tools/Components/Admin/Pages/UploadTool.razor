@page "/admin/tools/add"
@layout it_tools.Components.Admin.Layout.AdminLayout
@inject ILogger<UploadTool> Logger
@using System.IO.Compression
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using it_tools.Data.DTOs
@inject it_tools.Data.Services.IToolService ToolService
@inject NavigationManager NavigationManager

<div class="max-w-3xl mx-auto p-6 bg-white rounded-lg shadow-md">
    <h3 class="text-xl font-semibold text-gray-800 mb-6">Upload New Tool</h3>
    
    @if (isUploading)
    {
        <div class="mb-6">
            <div class="flex justify-center items-center">
                <div class="spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full text-blue-600" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <p class="text-center text-gray-600 mt-2">Uploading and processing tool...</p>
        </div>
    }
    else if (uploadedTool != null)
    {
        <div class="mb-6 bg-green-50 border border-green-200 rounded-lg p-4">
            <div class="flex items-center mb-3">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                <h4 class="ml-2 text-lg font-medium text-green-800">Tool Successfully Uploaded</h4>
            </div>

            <div class="bg-white border border-gray-200 rounded-lg p-4 mb-4 shadow-sm">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="space-y-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-500 uppercase tracking-wide">Tool ID</label>
                            <p class="text-sm text-gray-800 font-mono">@uploadedTool.Id</p>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-500 uppercase tracking-wide">Name</label>
                            <p class="text-sm text-gray-800 font-medium">@(string.IsNullOrEmpty(uploadedTool.Name) ? "-" : uploadedTool.Name)</p>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-500 uppercase tracking-wide">Group</label>
                            <p class="text-sm text-gray-800">@(uploadedTool?.Group?.Name == null ? "-" : uploadedTool.Group.Name)</p>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-500 uppercase tracking-wide">Slug</label>
                            <p class="text-sm text-gray-800">@(string.IsNullOrEmpty(uploadedTool?.Slug) ? "-" : uploadedTool.Slug)</p>
                        </div>
                    </div>
                    <div class="space-y-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-500 uppercase tracking-wide">Description</label>
                            <p class="text-sm text-gray-800">@(string.IsNullOrEmpty(uploadedTool?.Description) ? "-" : uploadedTool.Description)</p>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-500 uppercase tracking-wide">Status</label>
                            <div class="flex items-center space-x-4 mt-1">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(uploadedTool?.IsEnabled == true ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800")">
                                    @(uploadedTool?.IsEnabled == true ? "Enabled" : "Disabled")
                                </span>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(uploadedTool?.IsPremium == true ? "bg-purple-100 text-purple-800" : "bg-gray-100 text-gray-800")">
                                    @(uploadedTool?.IsPremium == true ? "Premium" : "Free")
                                </span>
                            </div>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-500 uppercase tracking-wide">Files</label>
                            <div class="text-sm text-gray-800">
                                <p class="truncate">DLL: @(string.IsNullOrEmpty(uploadedTool?.DllPath) ? "-" : Path.GetFileName(uploadedTool.DllPath))</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex flex-wrap gap-3 mt-4">
                <button @onclick="ResetForm" class="px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    Upload Another Tool
                </button>
                <button @onclick="() => NavigateToToolsList()" class="px-4 py-2 bg-blue-600 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    View Tools List
                </button>
                <button @onclick="() => NavigateToToolDetail(uploadedTool?.Slug)" class="px-4 py-2 bg-indigo-600 border border-transparent rounded-md shadow-sm text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Edit Tool Details
                </button>
            </div>
        </div>
    }
    
    @if (showError)
    {
        <div class="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
            <div class="flex">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
                <div class="ml-3">
                    <h3 class="text-sm font-medium text-red-800">Upload Error</h3>
                    <div class="mt-2 text-sm text-red-700">
                        <p>@errorMessage</p>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (uploadedTool == null)
    {
        <EditForm Model="newTool" OnValidSubmit="HandleSubmit" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Upload DLL File</label>
                <InputFile OnChange="HandleFileSelected" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
                <p class="mt-1 text-xs text-gray-500">Upload a DLL file (max 10MB) containing your tool.</p>
            </div>
            <div>
                <button type="submit" disabled="@(selectedFile == null || isUploading)" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed">
                    Add Tool
                </button>
            </div>
        </EditForm>
    }
</div>

@code {
    private ToolDto newTool = new ToolDto();
    private IBrowserFile? selectedFile;
    private ToolDto? uploadedTool;
    private bool isUploading = false;
    private bool showError = false;
    private string errorMessage = string.Empty;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        Logger.LogInformation("File selected: {FileName}", selectedFile.Name);
        showError = false;
    }

    private async Task HandleSubmit()
    {
        if (selectedFile == null)
        {
            SetError("No file selected. Please choose a DLL file.");
            return;
        }
        
        if (selectedFile.Size > 10 * 1024 * 1024) // 10 MB limit
        {
            SetError("File is too large. Please select a file smaller than 10MB.");
            return;
        }

        if (!selectedFile.Name.EndsWith(".dll", StringComparison.OrdinalIgnoreCase))
        {
            SetError("Only DLL files are supported. Please upload a DLL file.");
            return;
        }

        try
        {
            isUploading = true;
            uploadedTool = await ToolService.UploadToolAsync(selectedFile);
            
            if (uploadedTool == null)
            {
                SetError("Failed to process the uploaded tool. Please check the file contents and try again.");
                isUploading = false;
                return;
            }

            showError = false;
        }
        catch (Exception ex)
        {
            SetError($"Error uploading tool: {ex.Message}");
            Logger.LogError(ex, "Error occurred while uploading tool");
        }
        finally
        {
            isUploading = false;
        }
    }

    private void SetError(string message)
    {
        errorMessage = message;
        showError = true;
    }

    private void ResetForm()
    {
        uploadedTool = null;
        selectedFile = null;
        newTool = new ToolDto();
        showError = false;
    }

    private void NavigateToToolsList()
    {
        NavigationManager.NavigateTo("/admin/tools/activate");
    }

    private void NavigateToToolDetail(string? slug)
    {
        NavigationManager.NavigateTo($"/admin/tools/{slug}");
    }
}