@page "/admin/tools/add"
@layout it_tools.Components.Admin.Layout.AdminLayout
@inject ILogger<UploadTool> Logger
@using System.IO.Compression
@using System.Text.Json
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Forms
@using it_tools.Data.DTOs
@inject it_tools.Data.Services.IToolService ToolService
@inject NavigationManager NavigationManager

<div class="max-w-3xl mx-auto p-6 bg-white rounded-2xl shadow-lg animate-fade-in">
    <div class="flex items-center justify-between mb-8">
        <h3 class="text-2xl font-bold text-gray-900 tracking-tight">Upload New Tool</h3>
        <button @onclick="NavigateToToolsList" 
                class="flex items-center px-4 py-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
            </svg>
            Back to Tools
        </button>
    </div>

    @if (isUploading)
    {
        <div class="flex flex-col items-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-indigo-500"></div>
            <p class="text-gray-600 mt-4 font-medium">Uploading and processing tool...</p>
        </div>
    }
    else if (uploadedTool != null)
    {
        <div class="mb-8 bg-green-50 border-l-4 border-green-500 rounded-lg p-6 shadow-sm animate-slide-in">
            <div class="flex items-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                <h4 class="text-lg font-semibold text-green-800">Tool Successfully Uploaded</h4>
            </div>

            <div class="bg-white border border-gray-100 rounded-lg p-6 shadow-sm">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-xs font-semibold text-gray-500 uppercase tracking-wide">Tool ID</label>
                            <p class="text-sm text-gray-900 font-mono mt-1 truncate">@uploadedTool.Id</p>
                        </div>
                        <div>
                            <label class="block text-xs font-semibold text-gray-500 uppercase tracking-wide">Name</label>
                            <p class="text-sm text-gray-900 font-medium mt-1">@(string.IsNullOrEmpty(uploadedTool.Name) ? "-" : uploadedTool.Name)</p>
                        </div>
                        <div>
                            <label class="block text-xs font-semibold text-gray-500 uppercase tracking-wide">Group</label>
                            <p class="text-sm text-gray-900 mt-1">@(uploadedTool?.Group?.Name ?? "-")</p>
                        </div>
                    </div>
                    <div class="space-y-4">
                        <div>
                            <label class="block text-xs font-semibold text-gray-500 uppercase tracking-wide">Description</label>
                            <p class="text-sm text-gray-900 mt-1 line-clamp-3">@(string.IsNullOrEmpty(uploadedTool?.Description) ? "-" : uploadedTool.Description)</p>
                        </div>
                        <div>
                            <label class="block text-xs font-semibold text-gray-500 uppercase tracking-wide">Status</label>
                            <div class="flex space-x-3 mt-2">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium @(uploadedTool?.IsEnabled == true ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800") shadow-sm">
                                    @(uploadedTool?.IsEnabled == true ? "Enabled" : "Disabled")
                                </span>
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium @(uploadedTool?.IsPremium == true ? "bg-indigo-100 text-indigo-800" : "bg-gray-100 text-gray-800") shadow-sm">
                                    @(uploadedTool?.IsPremium == true ? "Premium" : "Free")
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex flex-wrap gap-3 mt-6">
                <button @onclick="ResetForm" 
                        class="px-4 py-2 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-100 transition-all duration-200 shadow-sm">
                    Upload Another
                </button>
                <button @onclick="() => NavigateToToolsList()" 
                        class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-all duration-200 shadow-sm">
                    View Tools List
                </button>
                <button @onclick="() => NavigateToToolDetail(uploadedTool?.Slug)" 
                        class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all duration-200 shadow-sm">
                    Edit Details
                </button>
            </div>
        </div>
    }

    @if (showError)
    {
        <div class="mb-6 bg-red-50 border-l-4 border-red-500 rounded-lg p-4 shadow-sm animate-slide-in">
            <div class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-red-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <div>
                    <h4 class="text-sm font-semibold text-red-800">Upload Error</h4>
                    <p class="text-xs text-red-700 mt-1">@errorMessage</p>
                </div>
            </div>
        </div>
    }

    @if (uploadedTool == null)
    {
        <EditForm Model="newTool" OnValidSubmit="HandleSubmit" class="space-y-6">
            <div>
                <label for="dllFile" class="block text-sm font-semibold text-gray-700 mb-2">Upload DLL File</label>
                <div class="relative">
                    <InputFile id="dllFile" OnChange="HandleFileSelected" 
                               class="absolute inset-0 w-full h-full opacity-0 cursor-pointer" />
                    <div class="flex items-center justify-between px-4 py-3 bg-gray-50 border border-gray-300 rounded-lg text-sm text-gray-600 hover:bg-gray-100 transition-all duration-200">
                        <span>@(selectedFile?.Name ?? "Choose a DLL file...")</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 0115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                    </div>
                </div>
                <p class="mt-2 text-xs text-gray-500">Upload a DLL file (max 10MB).</p>
            </div>
            <div>
                <button type="submit" 
                        disabled="@(selectedFile == null || isUploading)" 
                        class="w-full px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-all duration-200 shadow-sm disabled:opacity-50 disabled:cursor-not-allowed">
                    Add Tool
                </button>
            </div>
        </EditForm>
    }
</div>

<style>
    @@keyframes fadeIn {
        0% { opacity: 0; transform: translateY(10px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    @@keyframes slideIn {
        0% { opacity: 0; transform: translateY(-10px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-out;
    }

    .animate-slide-in {
        animation: slideIn 0.3s ease-out;
    }

    .line-clamp-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }
</style>

@code {
    private ToolDto newTool = new ToolDto();
    private IBrowserFile? selectedFile;
    private ToolDto? uploadedTool;
    private bool isUploading = false;
    private bool showError = false;
    private string errorMessage = string.Empty;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        Logger.LogInformation("File selected: {FileName}", selectedFile.Name);
        showError = false;
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (selectedFile == null)
        {
            SetError("No file selected. Please choose a DLL file.");
            return;
        }
        
        if (selectedFile.Size > 10 * 1024 * 1024)
        {
            SetError("File is too large. Please select a file smaller than 10MB.");
            return;
        }

        if (!selectedFile.Name.EndsWith(".dll", StringComparison.OrdinalIgnoreCase))
        {
            SetError("Only DLL files are supported. Please upload a DLL file.");
            return;
        }

        try
        {
            isUploading = true;
            uploadedTool = await ToolService.UploadToolAsync(selectedFile);
            
            if (uploadedTool == null)
            {
                SetError("Failed to process the uploaded tool. Please check the file contents and try again.");
                return;
            }

            showError = false;
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("A tool with slug"))
        {
            SetError("A tool with the same slug already exists. Please delete the existing tool or use a different tool.");
        }
        catch (UnauthorizedAccessException ex)
        {
            SetError("Access denied while processing the tool. The server may not have permission to delete files in ToolPlugins, or the file is locked.");
        }
        catch (Exception ex)
        {
            SetError($"Error uploading tool: {ex.Message}");
            Logger.LogError(ex, "Error occurred while uploading tool");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private void SetError(string message)
    {
        errorMessage = message;
        showError = true;
        uploadedTool = null;
        StateHasChanged();
    }

    private void ResetForm()
    {
        uploadedTool = null;
        selectedFile = null;
        newTool = new ToolDto();
        showError = false;
        StateHasChanged();
    }

    private void NavigateToToolsList()
    {
        NavigationManager.NavigateTo("/admin/tools");
    }

    private void NavigateToToolDetail(string? slug)
    {
        if (!string.IsNullOrEmpty(slug))
        {
            NavigationManager.NavigateTo($"/admin/tools/detail/{slug}");
        }
    }
}