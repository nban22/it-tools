@page "/admin/users"
@layout it_tools.Components.Admin.Layout.AdminLayout
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<it_tools.Data.ApplicationDbContext> DbContextFactory
@using it_tools.Data.Models

<div class="max-w-5xl mx-auto p-6">
    <h3 class="text-2xl font-bold text-gray-800 mb-8 tracking-tight">Users List</h3>

    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
        </div>
    }
    else
    {
        <div class="bg-white p-6 rounded-2xl shadow-xl">
            @if (users?.Any() == true)
            {
                <div class="hidden md:grid grid-cols-5 gap-4 items-center border-b border-gray-200 pb-3 mb-6">
                    <div class="text-gray-500 font-semibold uppercase text-sm tracking-wide">Username</div>
                    <div class="text-gray-500 font-semibold uppercase text-sm tracking-wide">Email</div>
                    <div class="text-gray-500 font-semibold uppercase text-sm tracking-wide">Status</div>
                    <div class="text-gray-500 font-semibold uppercase text-sm tracking-wide">Created Date</div>
                    <div class="text-gray-500 font-semibold uppercase text-sm tracking-wide text-right">Actions</div>
                </div>
                <ul class="space-y-4">
                    @foreach (var user in users)
                    {
                        <li class="p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-all duration-300 hover:shadow-md relative">
                            <div class="grid grid-cols-1 md:grid-cols-5 gap-4 items-center">
                                <div class="truncate">
                                    <span class="text-gray-800 font-semibold text-lg">@(user.Username ?? "No username")</span>
                                </div>
                                <div class="min-w-0 break-words">
                                    <span class="text-gray-700" title="@(user.Email ?? "No email")">@(user.Email ?? "No email")</span>
                                </div>
                                <div>
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium @(user.IsPremium ? "bg-blue-100 text-blue-800" : "bg-gray-100 text-gray-800") shadow-sm">
                                        @(user.IsPremium ? "Premium" : "Free")
                                    </span>
                                </div>
                                <div>
                                    <span class="text-gray-600 text-sm">@user.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                                </div>
                                <div class="hidden md:flex justify-end space-x-3">
                                    @if (user.IsPremium)
                                    {
                                        <button @onclick="() => DowngradeUser(user)" class="flex items-center text-yellow-600 hover:text-yellow-800 transition-colors duration-200">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                                            </svg>
                                            <span>Downgrade</span>
                                        </button>
                                    }
                                    <button @onclick="() => DeleteUser(user)" class="text-red-600 hover:text-red-800 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5-4h4m-4 4v12m4-12v12" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            <div class="md:hidden absolute top-2 right-2 flex space-x-3">
                                @if (user.IsPremium)
                                {
                                    <button @onclick="() => DowngradeUser(user)" class="flex items-center text-yellow-600 hover:text-yellow-800 transition-colors duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                                        </svg>
                                        <span>Downgrade</span>
                                    </button>
                                }
                                <button @onclick="() => DeleteUser(user)" class="text-red-600 hover:text-red-800 transition-colors duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5-4h4m-4 4v12m4-12v12" />
                                    </svg>
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p class="text-gray-500 text-center py-4">No users available.</p>
            }
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<User>? users;

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        users = await dbContext.Users.ToListAsync();
        isLoading = false;
    }

    private async Task DeleteUser(User user)
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        dbContext.Users.Remove(user);
        await dbContext.SaveChangesAsync();
        users?.Remove(user);
    }

    private async Task DowngradeUser(User user)
    {
        if (user == null || !user.IsPremium) return;

        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        user.IsPremium = false;
        dbContext.Users.Update(user);
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }
}