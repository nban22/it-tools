@page "/admin/users"
@layout it_tools.Components.Admin.Layout.AdminLayout
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<it_tools.Data.ApplicationDbContext> DbContextFactory
@using it_tools.Data.Models

<div class="max-w-6xl mx-auto p-6">
    <div class="flex justify-between items-center mb-8">
        <h3 class="text-2xl font-bold text-gray-900 tracking-tight animate-fade-in">Users List</h3>
        <div class="relative">
            <input type="text" 
                   @bind="searchQuery" 
                   @bind:event="oninput" 
                   placeholder="Search users..." 
                   class="pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 bg-white shadow-sm text-gray-900 placeholder-gray-500" />
            <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-4 border-indigo-500"></div>
        </div>
    }
    else
    {
        <div class="bg-white p-6 rounded-2xl shadow-lg animate-fade-in">
            @if (filteredUsers?.Any() == true)
            {
                <div class="hidden md:grid grid-cols-5 gap-4 items-center border-b border-gray-200 pb-3 mb-6">
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide">Username</div>
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide">Email</div>
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide">Status</div>
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide">Created Date</div>
                    <div class="text-gray-500 font-semibold uppercase text-xs tracking-wide text-right">Actions</div>
                </div>
                <ul class="space-y-3">
                    @foreach (var user in filteredUsers)
                    {
                        <li class="p-4 bg-gray-50 rounded-xl hover:bg-gray-100 transition-all duration-300 hover:shadow-sm relative group">
                            <div class="grid grid-cols-1 md:grid-cols-5 gap-4 items-center">
                                <div class="truncate font-medium text-gray-900">@(user.Username ?? "No username")</div>
                                <div class="min-w-0 break-words text-gray-700" title="@(user.Email ?? "No email")">@(user.Email ?? "No email")</div>
                                <div>
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium @(user.IsPremium ? "bg-indigo-100 text-indigo-800" : "bg-gray-100 text-gray-800") shadow-sm">
                                        @(user.IsPremium ? "Premium" : "Free")
                                    </span>
                                </div>
                                <div class="text-gray-600 text-sm">@user.CreatedAt.ToString("dd/MM/yyyy HH:mm")</div>
                                <div class="hidden md:flex justify-end space-x-3">
                                    @if (user.IsPremium)
                                    {
                                        <button @onclick="() => DowngradeUser(user)" 
                                                class="flex items-center px-3 py-1 text-yellow-600 hover:text-yellow-800 hover:bg-yellow-50 rounded-md transition-all duration-200">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                                            </svg>
                                            Downgrade
                                        </button>
                                    }
                                    <button @onclick="() => ConfirmDelete(user)" 
                                            class="flex items-center px-3 py-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md transition-all duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5-4h4m-4 4v12m4-12v12" />
                                        </svg>
                                        Delete
                                    </button>
                                </div>
                            </div>
                            <div class="md:hidden absolute top-2 right-2 flex space-x-2 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                                @if (user.IsPremium)
                                {
                                    <button @onclick="() => DowngradeUser(user)" 
                                            class="p-2 text-yellow-600 hover:text-yellow-800 hover:bg-yellow-50 rounded-md transition-all duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
                                        </svg>
                                    </button>
                                }
                                <button @onclick="() => ConfirmDelete(user)" 
                                        class="p-2 text-red-600 hover:text-red-800 hover:bg-red-50 rounded-md transition-all duration-200">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5-4h4m-4 4v12m4-12v12" />
                                    </svg>
                                </button>
                            </div>
                        </li>
                    }
                </ul>
            }
            else
            {
                <div class="text-center py-8">
                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
                    </svg>
                    <p class="mt-2 text-gray-500">No users found.</p>
                </div>
            }
        </div>
    }
</div>

<!-- Confirmation Modal -->
@if (showConfirmModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-md w-full shadow-xl animate-scale-in">
            <h3 class="text-lg font-semibold text-gray-900 mb-4">Confirm Deletion</h3>
            <p class="text-gray-600 mb-6">Are you sure you want to delete the user <span class="font-medium">@(userToDelete?.Username ?? "Unknown")</span>?</p>
            <div class="flex justify-end space-x-3">
                <button @onclick="CancelDelete" 
                        class="px-4 py-2 text-gray-600 hover:text-gray-800 bg-gray-100 hover:bg-gray-200 rounded-md transition-all duration-200">
                    Cancel
                </button>
                <button @onclick="DeleteUser" 
                        class="px-4 py-2 text-white bg-red-600 hover:bg-red-700 rounded-md transition-all duration-200">
                    Delete
                </button>
            </div>
        </div>
    </div>
}

<style>
    @@keyframes fadeIn {
        0% { opacity: 0; transform: translateY(10px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    @@keyframes scaleIn {
        0% { opacity: 0; transform: scale(0.9); }
        100% { opacity: 1; transform: scale(1); }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-out;
    }

    .animate-scale-in {
        animation: scaleIn 0.3s ease-out;
    }
</style>

@code {
    private bool isLoading = true;
    private List<User>? users;
    private string searchQuery = "";
    private bool showConfirmModal = false;
    private User? userToDelete;

    private List<User>? filteredUsers => users?.Where(u =>
        string.IsNullOrWhiteSpace(searchQuery) ||
        u.Username?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true ||
        u.Email?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) == true
    ).ToList();

    protected override async Task OnInitializedAsync()
    {
        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        users = await dbContext.Users.ToListAsync();
        isLoading = false;
    }

    private async Task DeleteUser()
    {
        if (userToDelete == null) return;

        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        dbContext.Users.Remove(userToDelete);
        await dbContext.SaveChangesAsync();
        users?.Remove(userToDelete);
        showConfirmModal = false;
        userToDelete = null;
        StateHasChanged();
    }

    private async Task DowngradeUser(User user)
    {
        if (user == null || !user.IsPremium) return;

        using var dbContext = await DbContextFactory.CreateDbContextAsync();
        user.IsPremium = false;
        dbContext.Users.Update(user);
        await dbContext.SaveChangesAsync();
        StateHasChanged();
    }

    private void ConfirmDelete(User user)
    {
        userToDelete = user;
        showConfirmModal = true;
    }

    private void CancelDelete()
    {
        showConfirmModal = false;
        userToDelete = null;
    }
}