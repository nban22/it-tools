@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inherits ToolComponentBase

<div class="p-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen flex items-center justify-center">
    <div class="max-w-4xl w-full">
        <!-- Header -->
        <div class="flex items-center justify-between mb-8 animate-fade-in">
            <div>
                <h2 class="text-3xl font-extrabold text-gray-900 tracking-tight">@Name</h2>
                <p class="text-gray-600 mt-2 text-lg">@Description</p>
            </div>
            <button @onclick="CopyCheatsheet" disabled="@_isCopying" class="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 shadow-md disabled:opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
                @if (_isCopying)
                {
                    <span>Copying...</span>
                }
                else
                {
                    <span>Copy Cheatsheet</span>
                }
            </button>
        </div>

        <!-- CSS Cheatsheet -->
        <div class="bg-white p-8 rounded-2xl shadow-xl animate-slide-in">
            <div class="space-y-8">
                <!-- Common Selectors -->
                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Common Selectors</h3>
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        @foreach (var item in CheatsheetData.CommonSelectors)
                        {
                            <div class="flex justify-between p-3 bg-gray-50 rounded-lg animate-fade-in">
                                <span class="font-mono text-blue-600 font-semibold">@item.Property</span>
                                <span class="text-gray-600">@item.Description</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Box Model -->
                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Box Model</h3>
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        @foreach (var item in CheatsheetData.BoxModel)
                        {
                            <div class="flex justify-between p-3 bg-gray-50 rounded-lg animate-fade-in">
                                <span class="font-mono text-blue-600 font-semibold">@item.Property</span>
                                <span class="text-gray-600">@item.Description</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Display and Positioning -->
                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Display and Positioning</h3>
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        @foreach (var item in CheatsheetData.DisplayAndPositioning)
                        {
                            <div class="flex justify-between p-3 bg-gray-50 rounded-lg animate-fade-in">
                                <span class="font-mono text-blue-600 font-semibold">@item.Property</span>
                                <span class="text-gray-600">@item.Description</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Flexbox -->
                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Flexbox</h3>
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        @foreach (var item in CheatsheetData.Flexbox)
                        {
                            <div class="flex justify-between p-3 bg-gray-50 rounded-lg animate-fade-in">
                                <span class="font-mono text-blue-600 font-semibold">@item.Property</span>
                                <span class="text-gray-600">@item.Description</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- Grid -->
                <div>
                    <h3 class="text-xl font-semibold text-gray-800 mb-4">Grid</h3>
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        @foreach (var item in CheatsheetData.Grid)
                        {
                            <div class="flex justify-between p-3 bg-gray-50 rounded-lg animate-fade-in">
                                <span class="font-mono text-blue-600 font-semibold">@item.Property</span>
                                <span class="text-gray-600">@item.Description</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toast Notification -->
@if (_showToast)
{
    <div class="fixed bottom-6 right-6 z-50 animate-toast-in">
        <div class="flex items-center bg-@(_toastSuccess ? "green" : "red")-500 text-white px-4 py-3 rounded-lg shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(_toastSuccess ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
            </svg>
            <span>@_toastMessage</span>
        </div>
    </div>
}

<style>
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateY(-20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastOut {
        from { transform: translateY(0); opacity: 1; }
        to { transform: translateY(20px); opacity: 0; }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    .animate-slide-in {
        animation: slideIn 0.5s ease-in-out;
    }

    .animate-toast-in {
        animation: toastIn 0.3s ease-in-out;
    }

    .animate-toast-out {
        animation: toastOut 0.3s ease-in-out forwards;
    }
</style>

@code {
    private bool _isCopying { get; set; }
    private bool _showToast { get; set; }
    private bool _toastSuccess { get; set; }
    private string _toastMessage { get; set; } = "";

    public override string Name => "CSS Cheatsheet";
    public override string Description => "A quick reference guide for CSS properties and selectors.";
    public override string Slug => "css-cheatsheet";
    public override string Group => "Software Development Tools";
    public override string Icon => "🎨";

    private static class CheatsheetData
    {
        public static readonly List<(string Property, string Description)> CommonSelectors = [
            (".class", "Selects elements with a specific class"),
            ("#id", "Selects an element with a specific ID"),
            ("element", "Selects all elements of a specific type (e.g., div)"),
            ("[attribute]", "Selects elements with a specific attribute"),
            ("::before / ::after", "Pseudo-elements for adding content before/after an element"),
            (":hover", "Pseudo-class for hover state")
        ];

        public static readonly List<(string Property, string Description)> BoxModel = [
            ("margin", "Sets the outer spacing (e.g., margin: 10px)"),
            ("padding", "Sets the inner spacing (e.g., padding: 10px)"),
            ("border", "Defines border (e.g., border: 1px solid black)"),
            ("box-sizing", "Defines how width/height are calculated (e.g., border-box)"),
            ("width / height", "Sets the dimensions of an element")
        ];

        public static readonly List<(string Property, string Description)> DisplayAndPositioning = [
            ("display", "Controls layout (e.g., block, inline, flex, grid)"),
            ("position", "Sets positioning (e.g., static, relative, absolute)"),
            ("top / right / bottom / left", "Positions element when position is set"),
            ("z-index", "Controls stacking order (e.g., z-index: 10)"),
            ("float", "Floats element (e.g., left, right)"),
            ("clear", "Clears floats (e.g., both)")
        ];

        public static readonly List<(string Property, string Description)> Flexbox = [
            ("display: flex", "Enables flexbox layout"),
            ("flex-direction", "Sets flex direction (e.g., row, column)"),
            ("justify-content", "Aligns items on main axis (e.g., space-between)"),
            ("align-items", "Aligns items on cross axis (e.g., center)"),
            ("flex-wrap", "Controls wrapping (e.g., wrap, nowrap)")
        ];

        public static readonly List<(string Property, string Description)> Grid = [
            ("display: grid", "Enables CSS grid layout"),
            ("grid-template-columns", "Defines columns (e.g., repeat(3, 1fr))"),
            ("grid-template-rows", "Defines rows (e.g., 100px 200px)"),
            ("gap", "Sets gap between grid items (e.g., 10px)"),
            ("grid-column / grid-row", "Positions items (e.g., 1 / 3)")
        ];
    }

    private async Task CopyCheatsheet()
    {
        _isCopying = true;
        try
        {
            var resultText = new System.Text.StringBuilder();
            resultText.AppendLine("CSS Cheatsheet");
            resultText.AppendLine("==============");

            resultText.AppendLine("\nCommon Selectors:");
            foreach (var item in CheatsheetData.CommonSelectors)
                resultText.AppendLine($"{item.Property}: {item.Description}");

            resultText.AppendLine("\nBox Model:");
            foreach (var item in CheatsheetData.BoxModel)
                resultText.AppendLine($"{item.Property}: {item.Description}");

            resultText.AppendLine("\nDisplay and Positioning:");
            foreach (var item in CheatsheetData.DisplayAndPositioning)
                resultText.AppendLine($"{item.Property}: {item.Description}");

            resultText.AppendLine("\nFlexbox:");
            foreach (var item in CheatsheetData.Flexbox)
                resultText.AppendLine($"{item.Property}: {item.Description}");

            resultText.AppendLine("\nGrid:");
            foreach (var item in CheatsheetData.Grid)
                resultText.AppendLine($"{item.Property}: {item.Description}");

            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", resultText.ToString());
            await ShowToast(true, "Cheatsheet copied to clipboard!");
        }
        catch (Exception ex)
        {
            await ShowToast(false, $"Error copying cheatsheet: {ex.Message}");
        }
        finally
        {
            _isCopying = false;
            StateHasChanged();
        }
    }

    private async Task ShowToast(bool success, string message)
    {
        _toastSuccess = success;
        _toastMessage = message;
        _showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showToast = false;
        StateHasChanged();
    }
}