@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inherits ToolComponentBase

<div class="p-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen flex items-center justify-center">
    <div class="max-w-lg w-full">
        <!-- Header -->
        <div class="flex items-center justify-between mb-8 animate-fadesalty-in">
            <div>
                <h2 class="text-3xl font-extrabold text-gray-900 tracking-tight">@Name</h2>
                <p class="text-gray-600 mt-2 text-lg">@Description</p>
            </div>
        </div>

        <!-- UUID Generator -->
        <div class="bg-white p-8 rounded-2xl shadow-xl mb-6 animate-slide-in">
            <div class="space-y-6">
                <!-- Version Selector -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">UUID Version:</label>
                    <select @bind="_selectedVersion" class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-800 h-12">
                        <option value="4">Version 4 (Random)</option>
                        <option value="1">Version 1 (Timestamp + MAC)</option>
                    </select>
                </div>

                <!-- Generate Button -->
                <div class="text-center">
                    <button @onclick="GenerateUUID" disabled="@_isGenerating" class="relative px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed h-12 w-full sm:w-auto">
                        @if (_isGenerating)
                        {
                            <span class="flex items-center justify-center">
                                <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Generating...
                            </span>
                        }
                        else
                        {
                            <span>Generate UUID</span>
                        }
                    </button>
                </div>

                <!-- Generated UUID -->
                @if (!string.IsNullOrEmpty(_generatedUUID))
                {
                    <div class="bg-gray-50 p-4 rounded-lg animate-fade-in">
                        <div class="flex items-center justify-between">
                            <p class="font-mono text-gray-800 break-all">@_generatedUUID</p>
                            <button @onclick="CopyUUID" disabled="@_isCopying" class="ml-4 flex items-center px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 shadow-md disabled:opacity-50">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                                @if (_isCopying)
                                {
                                    <span>Copying...</span>
                                }
                                else
                                {
                                    <span>Copy UUID</span>
                                }
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Toast Notification -->
@if (_showToast)
{
    <div class="fixed bottom-6 right-6 z-50 animate-toast-in">
        <div class="flex items-center bg-@(_toastSuccess ? "green" : "red")-500 text-white px-4 py-3 rounded-lg shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(_toastSuccess ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
            </svg>
            <span>@_toastMessage</span>
        </div>
    </div>
}

<style>
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateY(-20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastOut {
        from { transform: translateY(0); opacity: 1; }
        to { transform: translateY(20px); opacity: 0; }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    .animate-slide-in {
        animation: slideIn 0.5s ease-in-out;
    }

    .animate-toast-in {
        animation: toastIn 0.3s ease-in-out;
    }

    .animate-toast-out {
        animation: toastOut 0.3s ease-in-out forwards;
    }
</style>

@code {
    private string _generatedUUID { get; set; } = "";
    private string _selectedVersion { get; set; } = "4";
    private bool _isGenerating { get; set; }
    private bool _isCopying { get; set; }
    private bool _showToast { get; set; }
    private bool _toastSuccess { get; set; }
    private string _toastMessage { get; set; } = "";

    public override string Name => "UUID Generator";
    public override string Description => "Generate a unique UUID (Universally Unique Identifier) for your development needs.";
    public override string Slug => "uuid-generator";
    public override string Group => "Software Development Tools";
    public override string Icon => "🔑";

    private async Task GenerateUUID()
    {
        _isGenerating = true;
        try
        {
            await Task.Delay(200); // Simulate async generation for UX
            _generatedUUID = _selectedVersion switch
            {
                "1" => GenerateUUIDv1(),
                _ => Guid.NewGuid().ToString() // Version 4 by default
            };
            await ShowToast(true, $"UUID v{_selectedVersion} generated successfully!");
        }
        catch (Exception ex)
        {
            await ShowToast(false, $"Error generating UUID: {ex.Message}");
        }
        finally
        {
            _isGenerating = false;
            StateHasChanged();
        }
    }

    private string GenerateUUIDv1()
    {
        // Simulate UUID v1 (timestamp + MAC address)
        // Note: Actual UUID v1 requires MAC address; here we use random for demo
        var timestamp = DateTime.UtcNow.Ticks;
        var random = new Random();
        var bytes = new byte[16];
        BitConverter.GetBytes(timestamp).CopyTo(bytes, 0);
        random.NextBytes(bytes[8..]);
        bytes[6] = (byte)((bytes[6] & 0x0F) | 0x10); // Set version 1
        bytes[8] = (byte)((bytes[8] & 0x3F) | 0x80); // Set variant
        return new Guid(bytes).ToString();
    }

    private async Task CopyUUID()
    {
        if (string.IsNullOrEmpty(_generatedUUID))
        {
            await ShowToast(false, "No UUID to copy.");
            return;
        }

        _isCopying = true;
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _generatedUUID);
            await ShowToast(true, "UUID copied to clipboard!");
        }
        catch (Exception ex)
        {
            await ShowToast(false, $"Error copying UUID: {ex.Message}");
        }
        finally
        {
            _isCopying = false;
            StateHasChanged();
        }
    }

    private async Task ShowToast(bool success, string message)
    {
        _toastSuccess = success;
        _toastMessage = message;
        _showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showToast = false;
        StateHasChanged();
    }
}