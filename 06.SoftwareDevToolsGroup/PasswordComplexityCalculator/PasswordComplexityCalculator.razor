@* Ensure proper string termination and formatting in CopyResults method *@
@* Full corrected Razor component *@
@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inherits ToolComponentBase

<div class="min-h-screen bg-gradient-to-br p-6 md:p-10 flex items-center justify-center text-black">
    <div class="max-w-lg w-full backdrop-blur-lg rounded-2xl shadow-2xl p-8 animate-slide-up">
        <!-- Header -->
        <div class="text-center mb-8">
            <h2 class="text-3xl font-bold tracking-tight bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-indigo-500 animate-pulse-short">@Name</h2>
            <p class="text-gray-400 mt-2 text-base">@Description</p>
        </div>

        <!-- Password Input Form -->
        <div class="space-y-6">
            <div class="relative">
                <label for="password" class="block text-sm font-medium text-gray-300 mb-2">Enter Password</label>
                <div class="relative">
                    <input id="password" 
                           type="@(showPassword ? "text" : "password")" 
                           @bind="Password" 
                           @bind:event="oninput" 
                           placeholder="e.g., MyP@ssw0rd123" 
                           class="w-full px-4 py-3 bg-gray-900/50 border @(IsValidPassword ? "border-gray-600" : "border-red-500") rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-300 text-black placeholder-gray-500 pr-10"
                           aria-describedby="password-error" />
                    <button @onclick="TogglePasswordVisibility" 
                            class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 hover:text-gray-300 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(showPassword ? "M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.79m0 0L21 21" : "M15 12a3 3 0 11-6 0 3 3 0 016 0z")" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(showPassword ? "" : "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5z")" />
                        </svg>
                    </button>
                </div>
                @if (!IsValidPassword && hasSubmitted)
                {
                    <p id="password-error" class="text-red-400 text-xs mt-1 animate-pulse">Please enter a password.</p>
                }
            </div>

            <!-- Calculate Button -->
            <div class="text-center">
                <button @onclick="CalculateComplexity" 
                        disabled="@isCalculating" 
                        class="w-full px-6 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-1 disabled:opacity-50">
                    @(isCalculating ? "Calculating..." : "Calculate Complexity")
                </button>
            </div>
        </div>

        <!-- Complexity Results -->
        @if (complexityScore >= 0)
        {
            <div class="mt-8 p-6 bg-gray-900/50 rounded-2xl animate-slide-up">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-xl font-bold text-black">Password Strength</h3>
                    <button @onclick="CopyResults" 
                            disabled="@isCopying" 
                            class="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-300">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        @(isCopying ? "Copying..." : "Copy Results")
                    </button>
                </div>

                <!-- Complexity Score -->
                <div class="mb-6">
                    <h4 class="text-lg font-semibold text-gray-300 mb-2">Score: @complexityScore/100</h4>
                    <div class="w-full bg-gray-700 rounded-full h-3">
                        <div class="h-3 rounded-full transition-all duration-1000 ease-in-out" 
                             style="width: @(complexityScore)%; background: @(GetScoreColor(complexityScore))"></div>
                    </div>
                </div>

                <!-- Strength Level -->
                <div class="mb-6">
                    <h4 class="text-lg font-semibold text-gray-300 mb-2">Strength: @strengthLevel</h4>
                    <p class="text-gray-400 text-sm">@strengthMessage</p>
                    @if (!string.IsNullOrEmpty(suggestions))
                    {
                        <p class="text-yellow-400 text-sm mt-2">Suggestions: @suggestions</p>
                    }
                </div>

                <!-- Breakdown -->
                <div>
                    <h4 class="text-lg font-semibold text-gray-300 mb-2">Breakdown</h4>
                    <ul class="space-y-2 text-gray-400 text-sm">
                        <li class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 @(Password.Length >= 8 ? "text-green-500" : "text-red-500")" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(Password.Length >= 8 ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
                            </svg>
                            Length: @Password.Length (@(Password.Length >= 8 ? "Good" : "Too short"))
                        </li>
                        <li class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 @(hasLowercase ? "text-green-500" : "text-red-500")" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(hasLowercase ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
                            </svg>
                            Lowercase: @(hasLowercase ? "Included" : "Missing")
                        </li>
                        <li class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 @(hasUppercase ? "text-green-500" : "text-red-500")" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(hasUppercase ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
                            </svg>
                            Uppercase: @(hasUppercase ? "Included" : "Missing")
                        </li>
                        <li class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 @(hasNumbers ? "text-green-500" : "text-red-500")" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(hasNumbers ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
                            </svg>
                            Numbers: @(hasNumbers ? "Included" : "Missing")
                        </li>
                        <li class="flex items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 @(hasSpecial ? "text-green-500" : "text-red-500")" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(hasSpecial ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
                            </svg>
                            Special Characters: @(hasSpecial ? "Included" : "Missing")
                        </li>
                    </ul>
                </div>
            </div>
        }
    </div>
</div>

<!-- Toast Notification -->
@if (showToast)
{
    <div class="fixed bottom-6 right-6 z-50 animate-toast-in">
        <div class="flex items-center bg-@(toastSuccess ? "green" : "red")-600 text-white px-4 py-3 rounded-lg shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(toastSuccess ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
            </svg>
            <span>@toastMessage</span>
        </div>
    </div>
}

<style>
    @@keyframes slideUp {
        0% { opacity: 0; transform: translateY(20px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    @@keyframes toastIn {
        0% { opacity: 0; transform: translateX(20px); }
        100% { opacity: 1; transform: translateX(0); }
    }

    @@keyframes pulseShort {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    .animate-slide-up {
        animation: slideUp 0.5s ease-out;
    }

    .animate-toast-in {
        animation: toastIn 0.3s ease-out;
    }

    .animate-pulse-short {
        animation: pulseShort 2s ease-in-out infinite;
    }

    input:-webkit-autofill,
    input:-webkit-autofill:hover,
    input:-webkit-autofill:focus {
        -webkit-box-shadow: 0 0 0 30px #1f2937 inset !important;
        -webkit-text-fill-color: #e5e7eb !important;
    }
</style>

@code {
    private string Password { get; set; } = "";
    private int complexityScore { get; set; } = -1;
    private string strengthLevel { get; set; } = "";
    private string strengthMessage { get; set; } = "";
    private string suggestions { get; set; } = "";
    private bool hasLowercase { get; set; }
    private bool hasUppercase { get; set; }
    private bool hasNumbers { get; set; }
    private bool hasSpecial { get; set; }
    private bool hasSubmitted { get; set; } = false;
    private bool isCalculating { get; set; } = false;
    private bool isCopying { get; set; } = false;
    private bool showToast { get; set; } = false;
    private bool toastSuccess { get; set; } = false;
    private string toastMessage { get; set; } = "";
    private bool showPassword { get; set; } = false;

    private bool IsValidPassword => !string.IsNullOrWhiteSpace(Password);

    public override string Name => "Password Complexity Calculator";
    public override string Description => "Analyze password strength with detailed feedback and suggestions.";
    public override string Slug => "password-complexity-calculator";
    public override string Group => "Software Development Tools";
    public override string Icon => "🔒";

    private async Task CalculateComplexity()
    {
        hasSubmitted = true;
        complexityScore = -1;
        suggestions = "";

        if (!IsValidPassword)
        {
            await ShowToastAsync(false, "Please enter a password.");
            return;
        }

        isCalculating = true;
        try
        {
            await Task.Delay(500); // Simulate processing

            // Reset criteria
            hasLowercase = Password.Any(char.IsLower);
            hasUppercase = Password.Any(char.IsUpper);
            hasNumbers = Password.Any(char.IsDigit);
            hasSpecial = Password.Any(c => !char.IsLetterOrDigit(c));
            complexityScore = 0;

            // Scoring based on criteria
            complexityScore += Password.Length switch
            {
                >= 16 => 30,
                >= 12 => 20,
                >= 8 => 10,
                _ => 0
            };

            if (hasLowercase) complexityScore += 15;
            if (hasUppercase) complexityScore += 15;
            if (hasNumbers) complexityScore += 15;
            if (hasSpecial) complexityScore += 15;

            // Entropy-based bonus
            double entropy = CalculateEntropy(Password);
            complexityScore += (int)(entropy / 4); // Max 10 points

            // Penalty for common patterns
            if (HasCommonPatterns(Password))
            {
                complexityScore -= 20;
                suggestions += "Avoid common patterns or repetitive characters. ";
            }

            complexityScore = Math.Clamp(complexityScore, 0, 100);

            // Suggestions for improvement
            if (!hasLowercase) suggestions += "Add lowercase letters. ";
            if (!hasUppercase) suggestions += "Add uppercase letters. ";
            if (!hasNumbers) suggestions += "Add numbers. ";
            if (!hasSpecial) suggestions += "Add special characters. ";
            if (Password.Length < 12) suggestions += "Increase password length. ";

            // Determine strength level
            (strengthLevel, strengthMessage) = complexityScore switch
            {
                >= 85 => ("Very Strong", "Excellent! This password is highly secure."),
                >= 70 => ("Strong", "Good job! This password is secure but could be enhanced."),
                >= 50 => ("Moderate", "Fair. Consider adding more variety to strengthen it."),
                >= 30 => ("Weak", "This password needs improvement to be secure."),
                _ => ("Very Weak", "This password is highly vulnerable. Please strengthen it.")
            };

            await ShowToastAsync(true, "Complexity calculated successfully!");
        }
        catch (Exception ex)
        {
            await ShowToastAsync(false, $"Error: {ex.Message}");
        }
        finally
        {
            isCalculating = false;
            StateHasChanged();
        }
    }

    private double CalculateEntropy(string password)
    {
        var charsetSize = 0;
        if (password.Any(char.IsLower)) charsetSize += 26;
        if (password.Any(char.IsUpper)) charsetSize += 26;
        if (password.Any(char.IsDigit)) charsetSize += 10;
        if (password.Any(c => !char.IsLetterOrDigit(c))) charsetSize += 32;
        if (charsetSize == 0) return 0;
        return password.Length * Math.Log2(charsetSize);
    }

    private bool HasCommonPatterns(string password)
    {
        // Check for repetitive characters (e.g., "aaa")
        if (System.Text.RegularExpressions.Regex.IsMatch(password, @"(.)\1{2,}")) return true;
        // Check for common sequences (e.g., "123", "abc")
        if (System.Text.RegularExpressions.Regex.IsMatch(password.ToLower(), @"(123|abc|qwe)")) return true;
        // Check for keyboard patterns (simplified)
        if (System.Text.RegularExpressions.Regex.IsMatch(password.ToLower(), @"(qwerty|asdf|zxcv)")) return true;
        return false;
    }

    private string GetScoreColor(int score)
    {
        return score switch
        {
            >= 85 => "linear-gradient(to right, #10B981, #059669)",
            >= 70 => "linear-gradient(to right, #34D399, #10B981)",
            >= 50 => "linear-gradient(to right, #FBBF24, #D97706)",
            >= 30 => "linear-gradient(to right, #F97316, #EA580C)",
            _ => "linear-gradient(to right, #EF4444, #DC2626)"
        };
    }

    private async Task CopyResults()
    {
        if (complexityScore < 0)
        {
            await ShowToastAsync(false, "No results to copy.");
            return;
        }

        isCopying = true;
        try
        {
            string resultText = @"Password Complexity Results
Score: " + complexityScore + @"/100
Strength: " + strengthLevel + @"
Message: " + strengthMessage + @"
Suggestions: " + (string.IsNullOrEmpty(suggestions) ? "None" : suggestions) + @"
Breakdown:
- Length: " + Password.Length + " (" + (Password.Length >= 8 ? "Good" : "Too short") + @")
- Lowercase: " + (hasLowercase ? "Included" : "Missing") + @"
- Uppercase: " + (hasUppercase ? "Included" : "Missing") + @"
- Numbers: " + (hasNumbers ? "Included" : "Missing") + @"
- Special Characters: " + (hasSpecial ? "Included" : "Missing") + @"";

            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", resultText);
            await ShowToastAsync(true, "Results copied to clipboard!");
        }
        catch (Exception ex)
        {
            await ShowToastAsync(false, $"Copy failed: {ex.Message}");
        }
        finally
        {
            isCopying = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task ShowToastAsync(bool success, string message)
    {
        toastSuccess = success;
        toastMessage = message;
        showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        showToast = false;
        StateHasChanged();
    }
}