@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using Microsoft.JSInterop
@using System.Timers
@inject IJSRuntime JSRuntime
@inherits ToolComponentBase
@implements IDisposable

<div class="p-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen flex items-center justify-center">
    <div class="max-w-lg w-full">
        <!-- Header -->
        <div class="flex items-center justify-between mb-8 animate-fade-in">
            <div>
                <h2 class="text-3xl font-extrabold text-gray-900 tracking-tight">@Name</h2>
                <p class="text-gray-600 mt-2 text-lg">@Description</p>
            </div>
        </div>

        <!-- Stopwatch -->
        <div class="bg-white p-8 rounded-2xl shadow-xl animate-slide-in">
            <div class="space-y-6">
                <!-- Timer Display -->
                <div class="text-center">
                    <div class="text-5xl font-mono text-gray-800 tracking-wide bg-gray-50 py-4 rounded-lg">
                        @($"{_hours:D2}:{_minutes:D2}:{_seconds:D2}.{_milliseconds:D2}")
                    </div>
                </div>

                <!-- Control Buttons -->
                <div class="flex justify-center gap-4 flex-wrap">
                    @if (!_isRunning)
                    {
                        <button @onclick="StartStopwatch" class="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-lg hover:from-green-600 hover:to-green-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                            <span>Start</span>
                        </button>
                    }
                    else
                    {
                        <button @onclick="PauseStopwatch" class="px-6 py-3 bg-gradient-to-r from-yellow-500 to-yellow-600 text-white rounded-lg hover:from-yellow-600 hover:to-yellow-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5">
                            <span>Pause</span>
                        </button>
                    }
                    <button @onclick="ResetStopwatch" disabled="@_isRunning" class="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed">
                        <span>Reset</span>
                    </button>
                    <button @onclick="RecordLap" disabled="@(!_isRunning)" class="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed">
                        <span>Record Lap</span>
                    </button>
                </div>

                <!-- Lap Times -->
                @if (_lapTimes.Any())
                {
                    <div class="mt-6">
                        <h3 class="text-lg font-semibold text-gray-800 mb-4">Lap Times</h3>
                        <div class="space-y-2 max-h-[40vh] overflow-y-auto pr-2">
                            @foreach (var (index, lap) in _lapTimes.Select((lap, i) => (i + 1, lap)))
                            {
                                <div class="flex justify-between p-3 bg-gray-50 rounded-lg animate-fade-in">
                                    <span class="text-gray-700 font-medium">Lap @index</span>
                                    <span class="font-mono text-gray-700">@lap</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateY(-20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    .animate-slide-in {
        animation: slideIn 0.5s ease-in-out;
    }

    /* Custom scrollbar for lap times */
    .max-h-\[40vh\]::-webkit-scrollbar {
        width: 8px;
    }

    .max-h-\[40vh\]::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .max-h-\[40vh\]::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 4px;
    }

    .max-h-\[40vh\]::-webkit-scrollbar-thumb:hover {
        background: #555;
    }
</style>

@code {
    private int _hours { get; set; }
    private int _minutes { get; set; }
    private int _seconds { get; set; }
    private int _milliseconds { get; set; }
    private bool _isRunning { get; set; }
    private List<string> _lapTimes { get; set; } = new();
    private TimeSpan _elapsedTime;
    private System.Timers.Timer? _timer;

    public override string Name => "Stopwatch";
    public override string Description => "A simple stopwatch to measure time with lap recording.";
    public override string Slug => "stopwatch";
    public override string Group => "Measure Tools";
    public override string Icon => "⏱️";

    protected override void OnInitialized()
    {
        _timer = new System.Timers.Timer(10); // Update every 10ms
        _timer.Elapsed += UpdateTimer;
        _timer.AutoReset = true;
    }

    private async Task StartStopwatch()
    {
        if (!_isRunning)
        {
            _isRunning = true;
            _timer?.Start();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PauseStopwatch()
    {
        if (_isRunning)
        {
            _isRunning = false;
            _timer?.Stop();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ResetStopwatch()
    {
        _isRunning = false;
        _timer?.Stop();
        _elapsedTime = TimeSpan.Zero;
        _hours = 0;
        _minutes = 0;
        _seconds = 0;
        _milliseconds = 0;
        _lapTimes.Clear();
        await InvokeAsync(StateHasChanged);
    }

    private async Task RecordLap()
    {
        if (_isRunning)
        {
            var lapTime = $"{_hours:D2}:{_minutes:D2}:{_seconds:D2}.{_milliseconds:D2}";
            _lapTimes.Insert(0, lapTime); // Add to top
            await InvokeAsync(StateHasChanged);
        }
    }

    private void UpdateTimer(object? sender, ElapsedEventArgs e)
    {
        if (!_isRunning) return;

        _elapsedTime += TimeSpan.FromMilliseconds(10);
        _hours = _elapsedTime.Hours;
        _minutes = _elapsedTime.Minutes;
        _seconds = _elapsedTime.Seconds;
        _milliseconds = _elapsedTime.Milliseconds / 10; // Display in 2 digits (00-99)

        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }
}