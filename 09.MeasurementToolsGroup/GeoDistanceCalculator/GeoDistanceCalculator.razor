@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inherits ToolComponentBase

<div class="p-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen flex items-center justify-center">
    <div class="max-w-lg w-full">
        <div class="flex items-center justify-between mb-8 animate-fade-in">
            <div>
                <h2 class="text-3xl font-extrabold text-gray-900 tracking-tight">@Name</h2>
                <p class="text-gray-600 mt-2 text-lg">@Description</p>
            </div>
        </div>

        <div class="bg-white p-8 rounded-2xl shadow-xl mb-6 animate-slide-in">
            <div class="space-y-6">
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Latitude 1:</label>
                        <input type="number" @bind="_latitude1" step="0.000001" class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-800 placeholder-gray-400" placeholder="e.g., 40.7128" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Longitude 1:</label>
                        <input type="number" @bind="_longitude1" step="0.000001" class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-800 placeholder-gray-400" placeholder="e.g., -74.0060" />
                    </div>
                </div>

                <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Latitude 2:</label>
                        <input type="number" @bind="_latitude2" step="0.000001" class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-800 placeholder-gray-400" placeholder="e.g., 51.5074" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Longitude 2:</label>
                        <input type="number" @bind="_longitude2" step="0.000001" class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-800 placeholder-gray-400" placeholder="e.g., -0.1278" />
                    </div>
                </div>

                @if (_hasSubmitted && _errorMessage != null)
                {
                    <p class="text-red-500 text-xs mt-1 animate-fade-in">@_errorMessage</p>
                }

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Unit:</label>
                    <select @bind="_distanceUnit" class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-800">
                        <option value="Kilometers">Kilometers</option>
                        <option value="Miles">Miles</option>
                    </select>
                </div>

                <div class="text-center">
                    <button @onclick="CalculateDistance" disabled="@_isCalculating" class="relative px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed w-full sm:w-auto">
                        @if (_isCalculating)
                        {
                            <span class="flex items-center justify-center">
                                <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Calculating...
                            </span>
                        }
                        else
                        {
                            <span>Calculate Distance</span>
                        }
                    </button>
                </div>
            </div>
        </div>

        @if (_distanceResult != null)
        {
            <div class="bg-white p-8 rounded-2xl shadow-xl animate-slide-in">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-xl font-semibold text-gray-800">Distance</h3>
                    <button @onclick="CopyDistance" disabled="@_isCopying" class="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 shadow-md disabled:opacity-50 disabled:cursor-not-allowed">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        @if (_isCopying)
                        {
                            <span>Copying...</span>
                        }
                        else
                        {
                            <span>Copy Distance</span>
                        }
                    </button>
                </div>
                <p class="text-2xl font-semibold text-gray-800 text-center">@_distanceResult</p>
            </div>
        }
    </div>
</div>

@if (_showToast)
{
    <div class="fixed bottom-6 right-6 z-50 animate-toast-in">
        <div class="flex items-center bg-@(_toastSuccess ? "green" : "red")-500 text-white px-4 py-3 rounded-lg shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(_toastSuccess ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
            </svg>
            <span>@_toastMessage</span>
        </div>
    </div>
}

<style>
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateY(-20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastOut {
        from { transform: translateY(0); opacity: 1; }
        to { transform: translateY(20px); opacity: 0; }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    .animate-slide-in {
        animation: slideIn 0.5s ease-in-out;
    }

    .animate-toast-in {
        animation: toastIn 0.3s ease-in-out;
    }

    .animate-toast-out {
        animation: toastOut 0.3s ease-in-out forwards;
    }
</style>

@code {
    private double _latitude1 { get; set; }
    private double _longitude1 { get; set; }
    private double _latitude2 { get; set; }
    private double _longitude2 { get; set; }
    private string _distanceUnit { get; set; } = "Kilometers";
    private string? _distanceResult { get; set; }
    private bool _hasSubmitted { get; set; }
    private bool _isCalculating { get; set; }
    private bool _isCopying { get; set; }
    private bool _showToast { get; set; }
    private bool _toastSuccess { get; set; }
    private string _toastMessage { get; set; } = "";
    private string? _errorMessage { get; set; }

    public override string Name => "Geographic Distance Calculator";
    public override string Description => "Calculate the distance between two geographic coordinates.";
    public override string Slug => "geo-distance-calculator";
    public override string Group => "Measure Tools";
    public override string Icon => "🌍";

    private async Task CalculateDistance()
    {
        _hasSubmitted = true;
        _distanceResult = null;
        _errorMessage = null;

        if (_latitude1 < -90 || _latitude1 > 90 || _latitude2 < -90 || _latitude2 > 90)
        {
            _errorMessage = "Latitude must be between -90 and 90.";
            await ShowToast(false, _errorMessage);
            return;
        }

        if (_longitude1 < -180 || _longitude1 > 180 || _longitude2 < -180 || _longitude2 > 180)
        {
            _errorMessage = "Longitude must be between -180 and 180.";
            await ShowToast(false, _errorMessage);
            return;
        }

        _isCalculating = true;
        try
        {
            await Task.Delay(200); // Simulate async for UX
            double distance = CalculateHaversineDistance(_latitude1, _longitude1, _latitude2, _longitude2);
            if (_distanceUnit == "Miles")
            {
                distance *= 0.621371;
                _distanceResult = $"{distance:F2} Miles";
            }
            else
            {
                _distanceResult = $"{distance:F2} Kilometers";
            }
            await ShowToast(true, "Distance calculated successfully!");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error calculating distance: {ex.Message}";
            await ShowToast(false, _errorMessage);
        }
        finally
        {
            _isCalculating = false;
            StateHasChanged();
        }
    }

    private double CalculateHaversineDistance(double lat1, double lon1, double lat2, double lon2)
    {
        const double R = 6371; // Earth's radius in kilometers
        double dLat = ToRadians(lat2 - lat1);
        double dLon = ToRadians(lon2 - lon1);
        double a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                   Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *
                   Math.Sin(dLon / 2) * Math.Sin(dLon / 2);
        double c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return R * c;
    }

    private double ToRadians(double degrees)
    {
        return degrees * Math.PI / 180;
    }

    private async Task CopyDistance()
    {
        if (string.IsNullOrEmpty(_distanceResult))
        {
            await ShowToast(false, "No distance to copy.");
            return;
        }

        _isCopying = true;
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _distanceResult);
            await ShowToast(true, "Distance copied to clipboard!");
        }
        catch (Exception ex)
        {
            await ShowToast(false, $"Error copying distance: {ex.Message}");
        }
        finally
        {
            _isCopying = false;
            StateHasChanged();
        }
    }

    private async Task ShowToast(bool success, string message)
    {
        _toastSuccess = success;
        _toastMessage = message;
        _showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showToast = false;
        StateHasChanged();
    }
}