@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using Microsoft.JSInterop
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JSRuntime
@inherits ToolComponentBase

<div class="p-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
    <div class="flex items-center justify-between mb-8 animate-fade-in">
        <div>
            <h2 class="text-3xl font-extrabold text-gray-900 tracking-tight">@Name</h2>
            <p class="text-gray-600 mt-1">@Description</p>
        </div>
    </div>

    <!-- QR Code Generator Form -->
    <div class="bg-white p-6 rounded-2xl shadow-xl mb-6 animate-slide-in max-w-md mx-auto">
        <div class="space-y-6">
            <!-- Input URL or Text -->
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Enter URL or Text:</label>
                <input type="text" @bind="InputText" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 h-12" placeholder="e.g., https://example.com" />
                @if (string.IsNullOrEmpty(InputText) && hasSubmitted)
                {
                    <p class="text-red-500 text-xs mt-1">Please enter a URL or text to generate QR code.</p>
                }
            </div>

            <!-- Generate Button -->
            <div class="text-center">
                <button @onclick="GenerateQRCode" disabled="@isProcessing" class="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 h-12">
                    @if (isProcessing)
                    {
                        <span>Generating...</span>
                    }
                    else
                    {
                        <span>Generate QR Code</span>
                    }
                </button>
            </div>
        </div>
    </div>

    <!-- QR Code Result -->
    @if (!string.IsNullOrEmpty(qrCodeUrl))
    {
        <div class="bg-white p-6 rounded-2xl shadow-xl animate-slide-in max-w-md mx-auto">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-xl font-semibold text-gray-800">Your QR Code</h3>
                <button @onclick="DownloadQRCode" disabled="@isDownloading" class="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 shadow-md">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                    </svg>
                    @if (isDownloading)
                    {
                        <span>Downloading...</span>
                    }
                    else
                    {
                        <span>Download QR Code</span>
                    }
                </button>
            </div>
            <div class="flex justify-center">
                <img src="@qrCodeUrl" alt="QR Code" class="w-48 h-48" />
            </div>
        </div>
    }
    else if (hasSubmitted)
    {
        <div class="bg-white p-6 rounded-2xl shadow-xl animate-slide-in max-w-md mx-auto">
            <div class="text-center">
                <p class="text-red-600">Please enter a valid URL or text to generate a QR code.</p>
            </div>
        </div>
    }
</div>

<!-- Toast Notification -->
@if (showToast)
{
    <div class="fixed bottom-6 right-6 z-50 animate-toast-in">
        <div class="flex items-center bg-@(toastSuccess ? "green" : "red")-500 text-white px-4 py-3 rounded-lg shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(toastSuccess ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
            </svg>
            <span>@toastMessage</span>
        </div>
    </div>
}

<style>
    /* Custom Animations */
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateY(-20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastOut {
        from { transform: translateY(0); opacity: 1; }
        to { transform: translateY(20px); opacity: 0; }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    .animate-slide-in {
        animation: slideIn 0.5s ease-in-out;
    }

    .animate-toast-in {
        animation: toastIn 0.3s ease-in-out;
    }

    .animate-toast-out {
        animation: toastOut 0.3s ease-in-out forwards;
    }
</style>
```

@code {
    private string InputText { get; set; } = "";
    private string qrCodeUrl { get; set; } = "";
    private bool hasSubmitted { get; set; } = false;
    private bool isProcessing { get; set; } = false;
    private bool isDownloading { get; set; } = false;
    private bool showToast { get; set; } = false;
    private bool toastSuccess { get; set; } = false;
    private string toastMessage { get; set; } = "";

    // Metadata for the tool
    public override string Name => "QR Code Generator";
    public override string Description => "Generate QR codes from URLs or text with ease.";
    public override string Slug => "qr-code-generator";
    public override string Group => "Network Tools";
    public override string Icon => "📷";

    private async Task GenerateQRCode()
    {
        hasSubmitted = true;
        qrCodeUrl = "";
        
        if (string.IsNullOrEmpty(InputText))
        {
            ShowToast(false, "Please enter a URL or text.");
            return;
        }

        isProcessing = true;
        try
        {
            await Task.Delay(500); // Simulate processing
            // Using a public QR code API (QRCode Monkey)
            string encodedText = Uri.EscapeDataString(InputText);
            qrCodeUrl = $"https://api.qrserver.com/v1/create-qr-code/?size=150x150&data={encodedText}";
        }
        catch (Exception ex)
        {
            ShowToast(false, $"Error generating QR code: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DownloadQRCode()
    {
        if (string.IsNullOrEmpty(qrCodeUrl))
        {
            ShowToast(false, "No QR code to download.");
            return;
        }

        isDownloading = true;
        try
        {
            await JSRuntime.InvokeVoidAsync("downloadImage", qrCodeUrl, "qrcode.png");
            ShowToast(true, "QR code downloaded successfully!");
        }
        catch (Exception ex)
        {
            ShowToast(false, $"Error downloading QR code: {ex.Message}");
        }
        finally
        {
            isDownloading = false;
        }
    }

    private async void ShowToast(bool success, string message)
    {
        toastSuccess = success;
        toastMessage = message;
        showToast = true;
        await Task.Delay(3000);
        showToast = false;
    }
}
```

<!-- JavaScript helper for downloading the QR code -->
<script>
    window.downloadImage = (url, filename) => {
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>