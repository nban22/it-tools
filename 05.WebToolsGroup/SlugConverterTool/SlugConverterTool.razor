@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using System.Text.RegularExpressions
@using System.Globalization
@using Microsoft.JSInterop
@using Slugify
@attribute [ToolComponentAttribute(true)]
@inherits ToolComponentBase
@inject IJSRuntime JSRuntime

<div class="p-6 bg-white rounded-lg shadow-lg">
    <div class="flex items-center mb-6">
        <span class="text-3xl mr-3">🔗</span>
        <div>
            <h2 class="text-2xl font-bold text-gray-800">@Name</h2>
            <p class="text-gray-600">@Description</p>
        </div>
    </div>

    <!-- Configuration Panel -->
    <div class="bg-gray-50 rounded-lg border border-gray-200 mb-6">
        <div class="px-4 py-3 border-b border-gray-200">
            <h3 class="font-medium text-gray-800">Configuration</h3>
        </div>
        <div class="p-4 space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Separator Character</label>
                    <div class="relative">
                        <select @bind="_separator" class="w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                            <option value="-">Hyphen (-)</option>
                            <option value="_">Underscore (_)</option>
                            <option value=".">Dot (.)</option>
                            <option value="">None</option>
                        </select>
                    </div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Case</label>
                    <div class="relative">
                        <select @bind="_case" class="w-full px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                            <option value="lowercase">Lowercase (example-slug)</option>
                            <option value="uppercase">Uppercase (EXAMPLE-SLUG)</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="flex items-center">
                    <input 
                        id="stripStopwords" 
                        type="checkbox" 
                        @bind="_stripStopwords" 
                        class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                    <label for="stripStopwords" class="ml-2 block text-sm text-gray-700">
                        Remove common words (a, an, the, etc.)
                    </label>
                </div>

                <div class="flex items-center">
                    <input 
                        id="trimWhitespace" 
                        type="checkbox" 
                        @bind="_trimWhitespace" 
                        class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                    <label for="trimWhitespace" class="ml-2 block text-sm text-gray-700">
                        Trim whitespace from start and end
                    </label>
                </div>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Max Length (0 = unlimited)</label>
                <input 
                    type="number" 
                    @bind="_maxLength" 
                    min="0" 
                    max="1000" 
                    class="w-full md:w-1/4 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500" />
            </div>
        </div>
    </div>

    <!-- Input / Output Areas -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Input Area -->
        <div class="space-y-2">
            <div class="flex justify-between items-center">
                <label class="block text-sm font-medium text-gray-700">Input Text</label>
                <div class="flex space-x-2">
                    <button 
                        @onclick="ClearInput" 
                        class="inline-flex items-center p-1 border border-transparent rounded-md text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        title="Clear">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </button>
                    <button 
                        @onclick="PasteFromClipboard" 
                        class="inline-flex items-center p-1 border border-transparent rounded-md text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        title="Paste from clipboard">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="relative">
                <textarea 
                    @bind="_inputText" 
                    @bind:event="oninput"
                    @onkeyup="GenerateSlug"
                    class="w-full h-64 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
                    placeholder="Enter text to convert to slug..."></textarea>
            </div>
            <div class="text-right text-xs text-gray-500">
                @_inputText.Length characters
            </div>
        </div>

        <!-- Output Area -->
        <div class="space-y-2">
            <div class="flex justify-between items-center">
                <label class="block text-sm font-medium text-gray-700">Generated Slug</label>
                <button 
                    @onclick="CopyToClipboard" 
                    class="inline-flex items-center px-2.5 py-1.5 border border-gray-300 shadow-sm text-xs font-medium rounded text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                    Copy to Clipboard
                </button>
            </div>
            <div class="bg-gray-50 p-4 rounded-md border border-gray-200 h-64 overflow-auto break-all">
                <p class="font-mono text-gray-800">@_outputSlug</p>
            </div>
            <div class="text-right text-xs text-gray-500">
                @_outputSlug.Length characters
            </div>
        </div>
    </div>

    <!-- Generate Button -->
    <div class="mt-6 flex justify-center">
        <button 
            @onclick="GenerateSlug" 
            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Generate Slug
        </button>
    </div>

    <!-- Examples Section -->
    <div class="mt-8 bg-gray-50 rounded-lg border border-gray-200">
        <div class="px-4 py-3 border-b border-gray-200">
            <h3 class="font-medium text-gray-800">Examples</h3>
        </div>
        <div class="p-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div @onclick=@(() => UseExample("How to Create SEO-friendly URLs")) class="p-3 bg-white border border-gray-200 rounded-md cursor-pointer hover:bg-blue-50 transition-colors">
                    <p class="font-medium">How to Create SEO-friendly URLs</p>
                    <p class="text-sm text-gray-500 mt-1">→ how-to-create-seo-friendly-urls</p>
                </div>
                <div @onclick=@(() => UseExample("10 Tips & Tricks for Better Web Development!")) class="p-3 bg-white border border-gray-200 rounded-md cursor-pointer hover:bg-blue-50 transition-colors">
                    <p class="font-medium">10 Tips & Tricks for Better Web Development!</p>
                    <p class="text-sm text-gray-500 mt-1">→ 10-tips-tricks-for-better-web-development</p>
                </div>
                <div @onclick=@(() => UseExample("¿Cómo estás? - Learning Spanish Basics")) class="p-3 bg-white border border-gray-200 rounded-md cursor-pointer hover:bg-blue-50 transition-colors">
                    <p class="font-medium">¿Cómo estás? - Learning Spanish Basics</p>
                    <p class="text-sm text-gray-500 mt-1">→ como-estas-learning-spanish-basics</p>
                </div>
                <div @onclick=@(() => UseExample("The Latest iPhone 14 Pro Max Review 2023")) class="p-3 bg-white border border-gray-200 rounded-md cursor-pointer hover:bg-blue-50 transition-colors">
                    <p class="font-medium">The Latest iPhone 14 Pro Max Review 2023</p>
                    <p class="text-sm text-gray-500 mt-1">→ latest-iphone-14-pro-max-review-2023</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Information Section -->
    <div class="mt-8">
        <div class="text-sm text-gray-600 space-y-2">
            <p><span class="font-medium">What is a slug?</span> A slug is a URL-friendly version of a string, typically used in web addresses. Slugs are usually all lowercase, with spaces replaced by hyphens or underscores, and special characters removed.</p>
            <p><span class="font-medium">Why use slugs?</span> Slugs improve SEO, make URLs more readable for users, and prevent encoding issues in web addresses.</p>
        </div>
    </div>
    
    <div class="mt-6 text-xs text-gray-500">
        <p>All processing is done locally in your browser. Your text is not sent to any server.</p>
    </div>
</div>

@code {
    // Required properties from ToolComponentBase
    public override string Name => "URL Slug Converter";
    public override string Description => "Convert text into URL-friendly slugs for better SEO and readability";
    public override string Group => "Web Tools";
    public override string Icon => "🔗";
    
    // Component state
    private string _inputText = "";
    private string _outputSlug = "";
    private string _separator = "-";
    private string _case = "lowercase";
    private bool _stripStopwords = true;
    private bool _trimWhitespace = true;
    private int _maxLength = 0;
    
    // Slugify configuration
    private SlugHelper GetSlugifier()
    {
        // Create slug configuration
        var config = new SlugHelperConfiguration
        {
            StringReplacements = new Dictionary<string, string>
            {
                // Add any custom replacements here if needed
                {"&", "and"}
            },
            DeniedCharactersRegex = @"[^a-zA-Z0-9\s-_\.]",
            ForceLowerCase = _case == "lowercase",
            CollapseWhiteSpace = true,
            TrimWhitespace = _trimWhitespace
        };
        
        // Create the SlugHelper with the config
        var slugHelper = new SlugHelper(config);
        
        // For some versions of the library, we might need to set the separator separately
        // through a method rather than a property
        if (_separator != "-")
        {
            // Try to get ConfigureSeperator method using reflection if it exists
            var method = typeof(SlugHelper).GetMethod("ConfigureSeperator");
            if (method != null)
            {
                method.Invoke(slugHelper, new object[] { _separator });
            }
        }
        
        return slugHelper;
    }
    
    private async Task PasteFromClipboard()
    {
        try
        {
            var text = await JSRuntime.InvokeAsync<string>("navigator.clipboard.readText");
            _inputText = text;
            await GenerateSlug();
        }
        catch (Exception)
        {
            // Handle clipboard error silently
        }
    }
    
    private void ClearInput()
    {
        _inputText = "";
        _outputSlug = "";
    }
    
    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(_outputSlug))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _outputSlug);
            }
            catch (Exception)
            {
                // Handle clipboard error silently
            }
        }
    }
    
    private async Task GenerateSlug()
    {
        if (string.IsNullOrWhiteSpace(_inputText))
        {
            _outputSlug = "";
            return;
        }
        
        string processedText = _inputText;
        
        // Handle stop words if enabled
        if (_stripStopwords)
        {
            processedText = RemoveStopWords(processedText);
        }
        
        // Generate slug using the slugify library
        var slugifier = GetSlugifier();
        _outputSlug = slugifier.GenerateSlug(processedText);
        
        // Convert to uppercase if requested
        if (_case == "uppercase")
        {
            _outputSlug = _outputSlug.ToUpperInvariant();
        }
        
        await InvokeAsync(StateHasChanged);
    }
    
    private string RemoveStopWords(string input)
    {
        // Common English stop words
        var stopWords = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            "a", "an", "the", "and", "or", "but", "is", "are", "was", "were", 
            "be", "been", "being", "in", "of", "to", "for", "with", "by", "at", 
            "on", "this", "that", "these", "those"
        };
        
        // Split by whitespace and filter out stop words
        var words = input.Split(new[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
        var filteredWords = words.Where(word => !stopWords.Contains(word.Trim()));
        
        return string.Join(" ", filteredWords);
    }
    
    private async void UseExample(string example)
    {
        _inputText = example;
        await GenerateSlug();
    }
}