@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using System.Text.Json
@using System.Text
@using Microsoft.JSInterop
@using System.Security.Cryptography
@using System.Text.Json.Serialization
@using System.Text.Encodings.Web
@using System.Text.RegularExpressions
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.IdentityModel.Tokens
@attribute [ToolComponentAttribute(true)]
@inherits ToolComponentBase
@inject IJSRuntime JSRuntime

<div class="p-6 bg-white rounded-lg shadow-lg">
    <div class="flex items-center mb-6">
        <span class="text-3xl mr-3">🔑</span>
        <div>
            <h2 class="text-2xl font-bold text-gray-800">@Name</h2>
            <p class="text-gray-600">@Description</p>
        </div>
    </div>

    <!-- Main Content -->
    <div class="space-y-6">
        <!-- Input Area -->
        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">JWT Token</label>
                <div class="relative">
                    <textarea 
                        @bind="_jwtToken" 
                        @bind:event="oninput"
                        @onkeyup="ProcessToken"
                        class="w-full h-24 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500 font-mono text-sm"
                        placeholder="Paste your JWT token here..."></textarea>
                    
                    <div class="absolute right-2 bottom-2 flex space-x-2">
                        <button @onclick="ClearInput" class="p-1 text-gray-500 hover:text-gray-700 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                        </button>
                        <button @onclick="PasteFromClipboard" class="p-1 text-gray-500 hover:text-gray-700 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="p-3 bg-red-50 rounded-md border border-red-200">
                    <p class="text-sm text-red-600">@_errorMessage</p>
                </div>
            }

            <div class="flex justify-center">
                <button @onclick="ProcessToken" class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                    Decode Token
                </button>
            </div>
        </div>

        @if (_isTokenProcessed && _tokenParts != null)
        {
            <!-- Token Overview -->
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                <h3 class="text-lg font-medium text-gray-800 mb-3">Token Overview</h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div class="bg-white p-3 rounded-md border border-gray-200">
                        <p class="text-xs text-gray-500 mb-1">Issued At (iat)</p>
                        <p class="font-medium">@(_issuedAt ?? "Not available")</p>
                    </div>
                    <div class="bg-white p-3 rounded-md border border-gray-200">
                        <p class="text-xs text-gray-500 mb-1">Expires At (exp)</p>
                        <p class="font-medium">@(_expiresAt ?? "Not available")</p>
                    </div>
                    <div class="bg-white p-3 rounded-md border border-gray-200">
                        <p class="text-xs text-gray-500 mb-1">Status</p>
                        @if (_isExpired)
                        {
                            <p class="text-red-600 font-medium flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                Expired
                            </p>
                        }
                        else
                        {
                            <p class="text-green-600 font-medium flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                                Valid
                            </p>
                        }
                    </div>
                </div>
            </div>

            <!-- Decoded Sections Tabs -->
            <div class="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div class="flex border-b border-gray-200">
                    <button 
                        @onclick="() => _activeTab = 0" 
                        class="flex-1 px-4 py-3 font-medium @(_activeTab == 0 ? "text-blue-600 border-b-2 border-blue-600" : "text-gray-600 hover:text-gray-800")">
                        Header
                    </button>
                    <button 
                        @onclick="() => _activeTab = 1" 
                        class="flex-1 px-4 py-3 font-medium @(_activeTab == 1 ? "text-blue-600 border-b-2 border-blue-600" : "text-gray-600 hover:text-gray-800")">
                        Payload
                    </button>
                    <button 
                        @onclick="() => _activeTab = 2" 
                        class="flex-1 px-4 py-3 font-medium @(_activeTab == 2 ? "text-blue-600 border-b-2 border-blue-600" : "text-gray-600 hover:text-gray-800")">
                        Signature
                    </button>
                </div>

                <!-- Tab Content -->
                <div class="p-4">
                    @if (_activeTab == 0 && _tokenParts.Header != null)
                    {
                        <div class="flex justify-between items-center mb-3">
                            <h4 class="font-medium text-gray-800">Header</h4>
                            <button @onclick="() => CopyToClipboard(_formattedHeader)" class="text-blue-600 hover:text-blue-800 text-sm flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                </svg>
                                Copy
                            </button>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-md border border-gray-200 overflow-x-auto">
                            <pre class="text-sm font-mono whitespace-pre text-gray-800">@_formattedHeader</pre>
                        </div>
                    }
                    else if (_activeTab == 1 && _tokenParts.Payload != null)
                    {
                        <div class="flex justify-between items-center mb-3">
                            <h4 class="font-medium text-gray-800">Payload</h4>
                            <button @onclick="() => CopyToClipboard(_formattedPayload)" class="text-blue-600 hover:text-blue-800 text-sm flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                </svg>
                                Copy
                            </button>
                        </div>
                        <div class="bg-gray-50 p-4 rounded-md border border-gray-200 overflow-x-auto">
                            <pre class="text-sm font-mono whitespace-pre text-gray-800">@_formattedPayload</pre>
                        </div>
                    }
                    else if (_activeTab == 2)
                    {
                        <div class="flex justify-between items-center mb-3">
                            <h4 class="font-medium text-gray-800">Signature</h4>
                            @if (!string.IsNullOrEmpty(_tokenParts.Signature))
                            {
                                <button @onclick="() => CopyToClipboard(_tokenParts.Signature)" class="text-blue-600 hover:text-blue-800 text-sm flex items-center">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                    </svg>
                                    Copy
                                </button>
                            }
                        </div>
                        
                        @if (!string.IsNullOrEmpty(_tokenParts.Signature))
                        {
                            <div class="bg-gray-50 p-4 rounded-md border border-gray-200 overflow-x-auto">
                                <p class="text-sm font-mono break-all text-gray-800">@_tokenParts.Signature</p>
                            </div>
                            
                            <div class="mt-3 p-3 bg-blue-50 rounded-md border border-blue-200">
                                <p class="text-sm text-blue-800">
                                    <span class="font-medium">Note:</span> The signature is used to verify that the sender of the JWT is who it says it is and that the message wasn't changed along the way.
                                </p>
                            </div>
                        }
                        else
                        {
                            <div class="p-4 bg-gray-50 rounded-md border border-gray-200">
                                <p class="text-sm text-gray-600">No signature part found in the token.</p>
                            </div>
                        }
                    }
                </div>
            </div>

            <!-- Verify Signature Section -->
            <div class="bg-white rounded-lg border border-gray-200 overflow-hidden">
                <div class="px-4 py-3 bg-gray-50 border-b border-gray-200">
                    <h3 class="font-medium text-gray-800">Verify Signature (optional)</h3>
                </div>
                <div class="p-4">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Secret Key (for HS256, HS384, HS512)</label>
                            <input type="text" @bind="_secretKey" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
                        </div>
                        
                        <button @onclick="VerifySignature" class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors">
                            Verify Signature
                        </button>
                        
                        @if (_isVerificationAttempted)
                        {
                            <div class="p-3 @(_isSignatureValid ? "bg-green-50 border-green-200" : "bg-red-50 border-red-200") rounded-md border">
                                <p class="text-sm @(_isSignatureValid ? "text-green-700" : "text-red-700")">
                                    @if (_isSignatureValid)
                                    {
                                        <span class="flex items-center">
                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                            </svg>
                                            Signature is valid!
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="flex items-center">
                                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                            </svg>
                                            Signature verification failed. Please check the secret key or token validity.
                                        </span>
                                    }
                                </p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <div class="mt-6 text-sm text-gray-500">
            <p>Note: All processing is done locally in your browser. Your JWT tokens are not sent to any server.</p>
        </div>
    </div>
</div>

@code {
    // Required properties from ToolComponentBase
    public override string Name => "JWT Decoder";
    public override string Description => "Decode and verify JSON Web Tokens (JWT)";
    public override string Group => "Web Tools";
    public override string Icon => "🔑";
    
    // Component state
    private string _jwtToken = "";
    private string _errorMessage = "";
    private bool _isTokenProcessed = false;
    private int _activeTab = 0;
    private TokenParts _tokenParts = new();
    private string _formattedHeader = "";
    private string _formattedPayload = "";
    private string _secretKey = "";
    private bool _isVerificationAttempted = false;
    private bool _isSignatureValid = false;
    private string _issuedAt = null;
    private string _expiresAt = null;
    private bool _isExpired = false;
    
    private class TokenParts
    {
        public string Header { get; set; }
        public string Payload { get; set; }
        public string Signature { get; set; }
        public JsonDocument HeaderJson { get; set; }
        public JsonDocument PayloadJson { get; set; }
    }
    
    private async Task PasteFromClipboard()
    {
        try
        {
            var text = await JSRuntime.InvokeAsync<string>("navigator.clipboard.readText");
            _jwtToken = text;
            await ProcessToken();
        }
        catch (Exception)
        {
            _errorMessage = "Unable to access clipboard. Please paste the token manually.";
        }
    }
    
    private void ClearInput()
    {
        _jwtToken = "";
        _errorMessage = "";
        _isTokenProcessed = false;
        _tokenParts = new TokenParts();
        _formattedHeader = "";
        _formattedPayload = "";
        _issuedAt = null;
        _expiresAt = null;
        _isExpired = false;
        _isVerificationAttempted = false;
    }
    
    private async Task ProcessToken()
    {
        _errorMessage = "";
        _isTokenProcessed = false;
        _isVerificationAttempted = false;
        
        if (string.IsNullOrWhiteSpace(_jwtToken))
        {
            return;
        }
        
        // Automatically clean up the token
        _jwtToken = _jwtToken.Trim();
        
        // Extract token parts
        var parts = _jwtToken.Split('.');
        
        if (parts.Length < 2 || parts.Length > 3)
        {
            _errorMessage = "Invalid JWT token format. A JWT should have two or three parts separated by periods.";
            return;
        }
        
        try
        {
            _tokenParts = new TokenParts
            {
                Header = parts[0],
                Payload = parts[1],
                Signature = parts.Length > 2 ? parts[2] : ""
            };
            
            // Decode header
            var headerBytes = DecodeBase64Url(parts[0]);
            var headerJson = JsonDocument.Parse(headerBytes);
            _tokenParts.HeaderJson = headerJson;
            _formattedHeader = FormatJson(headerJson);
            
            // Decode payload
            var payloadBytes = DecodeBase64Url(parts[1]);
            var payloadJson = JsonDocument.Parse(payloadBytes);
            _tokenParts.PayloadJson = payloadJson;
            _formattedPayload = FormatJson(payloadJson);
            
            // Extract token metadata
            ExtractTokenMetadata(payloadJson);
            
            _isTokenProcessed = true;
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error decoding token: {ex.Message}";
        }
    }
    
    private byte[] DecodeBase64Url(string base64Url)
    {
        // Add padding if needed
        string padded = base64Url;
        switch (base64Url.Length % 4)
        {
            case 2: padded += "=="; break;
            case 3: padded += "="; break;
        }
        
        // Replace URL-specific characters
        padded = padded.Replace('-', '+').Replace('_', '/');
        
        return Convert.FromBase64String(padded);
    }
    
    private string FormatJson(JsonDocument jsonDoc)
    {
        var options = new JsonSerializerOptions
        {
            WriteIndented = true,
            Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        };
        
        using var stream = new MemoryStream();
        using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { Indented = true });
        jsonDoc.WriteTo(writer);
        writer.Flush();
        
        return Encoding.UTF8.GetString(stream.ToArray());
    }
    
    private void ExtractTokenMetadata(JsonDocument payloadJson)
    {
        _issuedAt = null;
        _expiresAt = null;
        _isExpired = false;
        
        // Check if payload has timestamps
        if (payloadJson.RootElement.TryGetProperty("iat", out var iatElement))
        {
            if (iatElement.TryGetInt64(out var iatUnix))
            {
                var iatDateTime = DateTimeOffset.FromUnixTimeSeconds(iatUnix).DateTime.ToUniversalTime();
                _issuedAt = $"{iatDateTime:yyyy-MM-dd HH:mm:ss} UTC";
            }
        }
        
        if (payloadJson.RootElement.TryGetProperty("exp", out var expElement))
        {
            if (expElement.TryGetInt64(out var expUnix))
            {
                var expDateTime = DateTimeOffset.FromUnixTimeSeconds(expUnix).DateTime.ToUniversalTime();
                _expiresAt = $"{expDateTime:yyyy-MM-dd HH:mm:ss} UTC";
                
                // Check if token is expired
                _isExpired = expDateTime < DateTime.UtcNow;
            }
        }
    }
    
    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
        }
        catch (Exception)
        {
            // Handle clipboard error silently
        }
    }
    
    private async Task VerifySignature()
    {
        _isVerificationAttempted = true;
        _isSignatureValid = false;
        
        if (string.IsNullOrWhiteSpace(_jwtToken) || string.IsNullOrWhiteSpace(_secretKey))
        {
            return;
        }
        
        try
        {
            // Create token validation parameters
            var validationParameters = new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_secretKey)),
                ValidateIssuer = false,
                ValidateAudience = false,
                RequireExpirationTime = false,
                ValidateLifetime = false
            };
            
            // Validate token
            var handler = new JwtSecurityTokenHandler();
            var principal = handler.ValidateToken(_jwtToken, validationParameters, out var validatedToken);
            
            _isSignatureValid = true;
        }
        catch (Exception)
        {
            _isSignatureValid = false;
        }
    }
}