@using Microsoft.JSInterop
@* IntegerBaseConverter.razor *@
<div class="bg-white rounded-lg shadow-md p-6">
    <div class="flex justify-between items-start">
        <h2 class="text-2xl font-bold text-gray-800">Integer Base Converter</h2>
        <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
        </svg>
    </div>
    <p class="text-sm text-gray-500 mt-2">Convert a number between different bases (decimal, hexadecimal, binary, octal, base64,...)</p>
    
    <div class="mt-4">
        <label class="text-gray-600 font-medium">Input number</label>
        <div class="flex items-center">
            <input type="text" @bind="inputNumber" @bind:event="oninput" class="w-full p-2 border border-gray-300 rounded-md" />
            <button @onclick="DecrementInput" class="ml-2 p-1 border border-gray-300 rounded-md text-gray-500">-</button>
            <button @onclick="IncrementInput" class="ml-1 p-1 border border-gray-300 rounded-md text-gray-500">+</button>
        </div>
    </div>
    
    <div class="mt-4">
        <label class="text-gray-600 font-medium">Input base</label>
        <div class="flex items-center">
            <input type="text" @bind="inputBase" @bind:event="oninput" class="w-full p-2 border border-gray-300 rounded-md" />
            <button @onclick="DecrementBase" class="ml-2 p-1 border border-gray-300 rounded-md text-gray-500">-</button>
            <button @onclick="IncrementBase" class="ml-1 p-1 border border-gray-300 rounded-md text-gray-500">+</button>
        </div>
    </div>
    
    <div class="mt-6">
        <div class="flex justify-between items-center my-2">
            <span class="font-medium text-gray-600">Binary (2)</span>
            <span class="text-gray-800">@ConvertToBase(2)</span>
            <button @onclick="() => CopyToClipboard(ConvertToBase(2))" class="text-gray-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 1H4a2 2 0 00-2 2v14h2V3h12V1zm3 4H8a2 2 0 00-2 2v14a2 2 0 002 2h11a2 2 0 002-2V7a2 2 0 00-2-2zm0 16H8V7h11v14z" />
                </svg>
            </button>
        </div>
        <div class="flex justify-between items-center my-2">
            <span class="font-medium text-gray-600">Octal (8)</span>
            <span class="text-gray-800">@ConvertToBase(8)</span>
            <button @onclick="() => CopyToClipboard(ConvertToBase(8))" class="text-gray-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 1H4a2 2 0 00-2 2v14h2V3h12V1zm3 4H8a2 2 0 00-2 2v14a2 2 0 002 2h11a2 2 0 002-2V7a2 2 0 00-2-2zm0 16H8V7h11v14z" />
                </svg>
            </button>
        </div>
        <div class="flex justify-between items-center my-2">
            <span class="font-medium text-gray-600">Decimal (10)</span>
            <span class="text-gray-800">@ConvertToBase(10)</span>
            <button @onclick="() => CopyToClipboard(ConvertToBase(10))" class="text-gray-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 1H4a2 2 0 00-2 2v14h2V3h12V1zm3 4H8a2 2 0 00-2 2v14a2 2 0 002 2h11a2 2 0 002-2V7a2 2 0 00-2-2zm0 16H8V7h11v14z" />
                </svg>
            </button>
        </div>
        <div class="flex justify-between items-center my-2">
            <span class="font-medium text-gray-600">Hexadecimal (16)</span>
            <span class="text-gray-800">@ConvertToBase(16)</span>
            <button @onclick="() => CopyToClipboard(ConvertToBase(16))" class="text-gray-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 1H4a2 2 0 00-2 2v14h2V3h12V1zm3 4H8a2 2 0 00-2 2v14a2 2 0 002 2h11a2 2 0 002-2V7a2 2 0 00-2-2zm0 16H8V7h11v14z" />
                </svg>
            </button>
        </div>
        <div class="flex justify-between items-center my-2">
            <span class="font-medium text-gray-600">Base64 (64)</span>
            <span class="text-gray-800">@ConvertToBase64()</span>
            <button @onclick="() => CopyToClipboard(ConvertToBase64())" class="text-gray-500">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 1H4a2 2 0 00-2 2v14h2V3h12V1zm3 4H8a2 2 0 00-2 2v14a2 2 0 002 2h11a2 2 0 002-2V7a2 2 0 00-2-2zm0 16H8V7h11v14z" />
                </svg>
            </button>
        </div>
    </div>
</div>

@code {
    private string inputNumber = "42";
    private int inputBase = 10;

    private void IncrementInput() => UpdateInputNumber(1);
    private void DecrementInput() => UpdateInputNumber(-1);
    private void IncrementBase() => UpdateInputBase(1);
    private void DecrementBase() => UpdateInputBase(-1);

    private void UpdateInputNumber(int delta)
    {
        if (int.TryParse(inputNumber, out int num) && int.TryParse(inputBase.ToString(), out int baseValue))
        {
            num += delta;
            if (num >= 0) inputNumber = num.ToString();
            StateHasChanged();
        }
    }

    private void UpdateInputBase(int delta)
    {
        if (int.TryParse(inputBase.ToString(), out int baseValue))
        {
            baseValue += delta;
            if (baseValue >= 2 && baseValue <= 64) inputBase = baseValue;
            StateHasChanged();
        }
    }

    private string ConvertToBase(int targetBase)
    {
        if (string.IsNullOrEmpty(inputNumber) || !int.TryParse(inputBase.ToString(), out int fromBase) || fromBase < 2 || fromBase > 64)
            return "Invalid";
        try
        {
            int number = Convert.ToInt32(inputNumber, fromBase);
            return Convert.ToString(number, targetBase).ToUpper();
        }
        catch
        {
            return "Invalid";
        }
    }

    private string ConvertToBase64()
    {
        if (string.IsNullOrEmpty(inputNumber) || !int.TryParse(inputBase.ToString(), out int fromBase) || fromBase < 2 || fromBase > 64)
            return "Invalid";
        try
        {
            int number = Convert.ToInt32(inputNumber, fromBase);
            return Convert.ToBase64String(BitConverter.GetBytes(number)).TrimEnd('=');
        }
        catch
        {
            return "Invalid";
        }
    }

    private async Task CopyToClipboard(string value)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", value);
    }

    [Inject] private IJSRuntime JSRuntime { get; set; }
}