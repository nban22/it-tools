@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inherits ToolComponentBase

<!-- Tool Info -->
## @Name
@Description

<!-- Main Container -->
<div class="bg-white p-6 rounded-2xl shadow-xl mb-6 animate-slide-in max-w-4xl mx-auto space-y-6">
    <!-- Input Area -->
    <div>
        <label class="block text-sm font-medium text-gray-700 mb-2">Nhập XML:</label>
        <textarea @bind="InputXML" rows="8"
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                  placeholder="Dán nội dung XML của bạn vào đây...">
        </textarea>
        @if (string.IsNullOrEmpty(InputXML) && hasSubmitted)
        {
            <p class="text-red-500 text-xs mt-1">Vui lòng nhập nội dung XML để định dạng.</p>
        }
    </div>

    <!-- Buttons -->
    <div class="flex justify-center gap-4">
        <button @onclick="FormatXML" disabled="@isFormatting"
                class="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 h-12">
            @if (isFormatting)
            {
                <span>Đang định dạng...</span>
            }
            else
            {
                <span>Định dạng XML</span>
            }
        </button>
        <button @onclick="ClearInput"
                class="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 h-12">
            Xoá
        </button>
    </div>
</div>

<!-- Output -->
@if (!string.IsNullOrEmpty(FormattedXML))
{
    <div class="bg-white p-6 rounded-2xl shadow-xl max-w-4xl mx-auto space-y-4 animate-slide-in">
        <div class="flex items-center justify-between mb-4">
            <h3 class="text-xl font-semibold text-gray-800">Kết quả XML đã định dạng</h3>
            <button @onclick="CopyFormattedXML" disabled="@isCopying"
                    class="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 shadow-md">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
                @if (isCopying)
                {
                    <span>Đang sao chép...</span>
                }
                else
                {
                    <span>Sao chép kết quả</span>
                }
            </button>
        </div>
        <pre class="bg-gray-100 p-4 rounded-lg overflow-x-auto text-sm"><code>@FormattedXML</code></pre>
    </div>
}

<!-- Toast Message -->
@if (showToast)
{
    <div class="fixed bottom-8 right-8 px-6 py-4 rounded-lg shadow-xl text-white transition-opacity duration-300 animate-fade-in-out
                @(toastSuccess ? "bg-green-600" : "bg-red-600")">
        @toastMessage
    </div>
}

@code {
    private string InputXML { get; set; } = "";
    private string FormattedXML { get; set; } = "";
    private bool hasSubmitted { get; set; } = false;
    private bool isFormatting { get; set; } = false;
    private bool isCopying { get; set; } = false;
    private bool showToast { get; set; } = false;
    private bool toastSuccess { get; set; } = false;
    private string toastMessage { get; set; } = "";

    public override string Name => "Định dạng XML";
    public override string Description => "Làm đẹp và định dạng mã XML giúp dễ đọc hơn.";
    public override string Slug => "xml-formatter";
    public override string Group => "Software Development Tools";
    public override string Icon => "📄";

    private async Task FormatXML()
    {
        hasSubmitted = true;
        FormattedXML = "";

        if (string.IsNullOrWhiteSpace(InputXML))
        {
            ShowToast(false, "Vui lòng nhập nội dung XML để định dạng.");
            return;
        }

        isFormatting = true;
        try
        {
            await Task.Delay(500);
            FormattedXML = BeautifyXML(InputXML);
            ShowToast(true, "Định dạng XML thành công!");
        }
        catch (Exception ex)
        {
            ShowToast(false, $"Lỗi: {ex.Message}");
        }
        finally
        {
            isFormatting = false;
        }
    }

    private string BeautifyXML(string xml)
    {
        try
        {
            var doc = new System.Xml.XmlDocument();
            doc.LoadXml(xml);
            var stringWriter = new System.IO.StringWriter();
            var xmlTextWriter = new System.Xml.XmlTextWriter(stringWriter)
            {
                Formatting = System.Xml.Formatting.Indented,
                Indentation = 2
            };
            doc.WriteContentTo(xmlTextWriter);
            return stringWriter.ToString();
        }
        catch
        {
            throw new Exception("Không thể phân tích cú pháp XML.");
        }
    }

    private async Task CopyFormattedXML()
    {
        if (string.IsNullOrEmpty(FormattedXML))
        {
            ShowToast(false, "Không có nội dung để sao chép.");
            return;
        }

        isCopying = true;
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", FormattedXML);
            ShowToast(true, "Đã sao chép kết quả!");
        }
        catch (Exception ex)
        {
            ShowToast(false, $"Lỗi khi sao chép: {ex.Message}");
        }
        finally
        {
            isCopying = false;
        }
    }

    private void ClearInput()
    {
        InputXML = "";
        FormattedXML = "";
        hasSubmitted = false;
    }

    private async void ShowToast(bool success, string message)
    {
        toastSuccess = success;
        toastMessage = message;
        showToast = true;
        await Task.Delay(3000);
        showToast = false;
    }
}
