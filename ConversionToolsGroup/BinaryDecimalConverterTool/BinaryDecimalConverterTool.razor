@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using System.Text
@using System.Numerics
@using System.Collections.Generic
@attribute [ToolComponentAttribute(true)]
@inherits ToolComponentBase

<div class="p-6 bg-white rounded-lg shadow-lg">
    <div class="flex items-center mb-6">
        <div class="mr-3 bg-indigo-100 p-2 rounded-lg">
            <span class="text-2xl">@Icon</span>
        </div>
        <div>
            <h2 class="text-2xl font-bold text-gray-800">@Name</h2>
            <p class="text-gray-600">@Description</p>
        </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Input Panel -->
        <div class="space-y-6">
            <!-- Decimal Input -->
            <div class="bg-gray-50 p-5 rounded-lg border border-gray-200">
                <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-semibold text-gray-700">Decimal Input</h3>
                    <div class="flex space-x-2">
                        <button 
                            @onclick="@(() => ConvertDecimalToBinary())" 
                            class="px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm flex items-center transition duration-150 ease-in-out">
                            Convert →
                        </button>
                    </div>
                </div>
                
                <div class="space-y-3">
                    <div>
                        <textarea 
                            @bind="_decimalInput" 
                            class="w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 h-24 font-mono"
                            placeholder="Enter decimal number..."></textarea>
                    </div>
                    
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <input 
                                type="checkbox" 
                                id="groupDigitsDecimal" 
                                @bind="_groupDigitsDecimal" 
                                class="mr-2 h-4 w-4 text-indigo-600 focus:ring-indigo-500 rounded" />
                            <label for="groupDigitsDecimal" class="text-sm text-gray-700">Group digits</label>
                        </div>
                        
                        <div class="flex space-x-2">
                            <button 
                                @onclick="@(() => ClearInput("decimal"))" 
                                class="px-3 py-1 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md text-sm flex items-center transition duration-150 ease-in-out">
                                Clear
                            </button>
                            <button 
                                @onclick="@(() => GenerateRandomNumber("decimal"))" 
                                class="px-3 py-1 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md text-sm flex items-center transition duration-150 ease-in-out">
                                Random
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Binary Input -->
            <div class="bg-gray-50 p-5 rounded-lg border border-gray-200">
                <div class="flex justify-between items-center mb-3">
                    <h3 class="text-lg font-semibold text-gray-700">Binary Input</h3>
                    <div class="flex space-x-2">
                        <button 
                            @onclick="@(() => ConvertBinaryToDecimal())" 
                            class="px-3 py-1 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md text-sm flex items-center transition duration-150 ease-in-out">
                            Convert →
                        </button>
                    </div>
                </div>
                
                <div class="space-y-3">
                    <div>
                        <textarea 
                            @bind="_binaryInput" 
                            class="w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 h-24 font-mono"
                            placeholder="Enter binary number..."></textarea>
                    </div>
                    
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            <input 
                                type="checkbox" 
                                id="groupDigitsBinary" 
                                @bind="_groupDigitsBinary" 
                                class="mr-2 h-4 w-4 text-indigo-600 focus:ring-indigo-500 rounded" />
                            <label for="groupDigitsBinary" class="text-sm text-gray-700">Group bits</label>
                        </div>
                        
                        <div class="flex space-x-2">
                            <button 
                                @onclick="@(() => ClearInput("binary"))" 
                                class="px-3 py-1 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md text-sm flex items-center transition duration-150 ease-in-out">
                                Clear
                            </button>
                            <button 
                                @onclick="@(() => GenerateRandomNumber("binary"))" 
                                class="px-3 py-1 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md text-sm flex items-center transition duration-150 ease-in-out">
                                Random
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Quick Conversion Reference -->
            <div class="bg-blue-50 p-4 rounded-lg border border-blue-200">
                <h4 class="text-sm font-semibold text-blue-800 mb-2">Quick Reference</h4>
                <div class="grid grid-cols-2 gap-3 text-sm text-blue-800">
                    <div class="p-2 bg-white/60 rounded border border-blue-100 flex justify-between">
                        <span>Decimal 10</span>
                        <span class="font-mono">= 1010 (Binary)</span>
                    </div>
                    <div class="p-2 bg-white/60 rounded border border-blue-100 flex justify-between">
                        <span>Decimal 42</span>
                        <span class="font-mono">= 101010 (Binary)</span>
                    </div>
                    <div class="p-2 bg-white/60 rounded border border-blue-100 flex justify-between">
                        <span>Decimal 100</span>
                        <span class="font-mono">= 1100100 (Binary)</span>
                    </div>
                    <div class="p-2 bg-white/60 rounded border border-blue-100 flex justify-between">
                        <span>Decimal 255</span>
                        <span class="font-mono">= 11111111 (Binary)</span>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Result Panel -->
        <div class="space-y-6">
            <!-- Conversion Result -->
            <div class="bg-gray-50 p-5 rounded-lg border border-gray-200">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-700">Conversion Result</h3>
                    
                    @if (!string.IsNullOrEmpty(_result))
                    {
                        <button 
                            @onclick="CopyResult" 
                            class="px-3 py-1 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-md text-sm flex items-center transition duration-150 ease-in-out">
                            Copy
                        </button>
                    }
                </div>
                
                <div class="h-32 overflow-auto border border-gray-200 rounded-md bg-white p-3 mb-3">
                    @if (!string.IsNullOrEmpty(_result))
                    {
                        <pre class="text-gray-800 font-mono text-sm whitespace-pre-wrap">@_result</pre>
                    }
                    else
                    {
                        <div class="h-full flex items-center justify-center text-gray-400">
                            <p>Conversion result will appear here</p>
                        </div>
                    }
                </div>
                
                @if (!string.IsNullOrEmpty(_statusMessage))
                {
                    <div class="p-3 rounded-md @(_isError ? "bg-red-50 text-red-800 border border-red-200" : "bg-green-50 text-green-800 border border-green-200")">
                        <p class="text-sm">@_statusMessage</p>
                    </div>
                }
            </div>
            
            <!-- Analysis and Details -->
            <div class="bg-gray-50 p-5 rounded-lg border border-gray-200">
                <h3 class="text-lg font-semibold text-gray-700 mb-4">Analysis</h3>
                
                @if (_lastConvertedValue != null)
                {
                    <div class="space-y-4">
                        <div class="grid grid-cols-2 gap-3">
                            <div class="p-3 bg-white rounded-lg border border-gray-200">
                                <h4 class="text-sm font-medium text-gray-500 mb-1">Decimal</h4>
                                <p class="text-lg font-semibold text-gray-800 font-mono">@FormatDecimalForDisplay(_lastConvertedValue.Value)</p>
                            </div>
                            <div class="p-3 bg-white rounded-lg border border-gray-200">
                                <h4 class="text-sm font-medium text-gray-500 mb-1">Binary</h4>
                                <p class="text-lg font-semibold text-gray-800 font-mono">@FormatBinaryForDisplay(ConvertToBinary(_lastConvertedValue.Value))</p>
                            </div>
                        </div>
                        
                        <div class="grid grid-cols-2 gap-3">
                            <div class="p-3 bg-white rounded-lg border border-gray-200">
                                <h4 class="text-sm font-medium text-gray-500 mb-1">Hexadecimal</h4>
                                <p class="font-semibold text-gray-800 font-mono">@ConvertToHex(_lastConvertedValue.Value)</p>
                            </div>
                            <div class="p-3 bg-white rounded-lg border border-gray-200">
                                <h4 class="text-sm font-medium text-gray-500 mb-1">Octal</h4>
                                <p class="font-semibold text-gray-800 font-mono">@ConvertToOctal(_lastConvertedValue.Value)</p>
                            </div>
                        </div>
                        
                        <div class="p-3 bg-white rounded-lg border border-gray-200">
                            <h4 class="text-sm font-medium text-gray-500 mb-1">Bit Information</h4>
                            <div class="grid grid-cols-3 gap-2 text-sm">
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Bits:</span>
                                    <span class="font-medium">@GetBitCount(_lastConvertedValue.Value)</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Bytes:</span>
                                    <span class="font-medium">@(GetBitCount(_lastConvertedValue.Value) / 8.0)</span>
                                </div>
                                <div class="flex justify-between">
                                    <span class="text-gray-600">Nibbles:</span>
                                    <span class="font-medium">@(GetBitCount(_lastConvertedValue.Value) / 4.0)</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="h-32 flex items-center justify-center text-gray-400">
                        <p>Convert a number to see the analysis</p>
                    </div>
                }
            </div>
            
            <!-- Bit Visualization -->
            @if (_lastConvertedValue != null)
            {
                <div class="bg-gray-50 p-5 rounded-lg border border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-700 mb-4">Bit Visualization</h3>
                    
                    <div class="overflow-x-auto">
                        <div class="inline-flex flex-nowrap min-w-full">
                            @{
                                string binaryStr = ConvertToBinary(_lastConvertedValue.Value);
                                for (int i = 0; i < binaryStr.Length; i++)
                                {
                                    char bit = binaryStr[i];
                                    <div class="flex flex-col items-center mr-1 mb-1">
                                        <div class="w-8 h-8 @(bit == '1' ? "bg-indigo-600 text-white" : "bg-gray-200 text-gray-700") rounded-md flex items-center justify-center font-mono font-bold">
                                            @bit
                                        </div>
                                        <span class="text-xs text-gray-500 mt-1">@(binaryStr.Length - i - 1)</span>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                    
                    <div class="mt-3 text-xs text-gray-500 text-center">
                        <p>Power of 2 (position value)</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string _decimalInput = "";
    private string _binaryInput = "";
    private string _result = "";
    private string _statusMessage = "";
    private bool _isError = false;
    private bool _groupDigitsDecimal = true;
    private bool _groupDigitsBinary = true;
    
    private BigInteger? _lastConvertedValue = null;
    
    // Implement required properties from ToolComponentBase
    public override string Name => "Binary<->Decimal Converter";
    public override string Description => "Convert numbers between binary and decimal number systems";
    public override string Group => "Conversion Tools";
    public override string Icon => "🔢";
    
    private void CopyResult()
    {
        try
        {
            _statusMessage = "Copied to clipboard!";
            _isError = false;
            // Note: Actual clipboard functionality must be implemented client-side with JS interop
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error copying to clipboard: {ex.Message}";
            _isError = true;
        }
    }
    
    private void ClearInput(string inputType)
    {
        switch (inputType)
        {
            case "decimal":
                _decimalInput = "";
                break;
            case "binary":
                _binaryInput = "";
                break;
            default:
                _decimalInput = "";
                _binaryInput = "";
                break;
        }
        
        _result = "";
        _statusMessage = "";
        _lastConvertedValue = null;
    }
    
    private void GenerateRandomNumber(string numberType)
    {
        try
        {
            Random random = new Random();
            
            switch (numberType)
            {
                case "decimal":
                    int decimalDigits = random.Next(1, 10); // Random number of digits between 1 and 10
                    StringBuilder decimalBuilder = new StringBuilder();
                    
                    // First digit should not be 0
                    decimalBuilder.Append(random.Next(1, 10));
                    
                    // Remaining digits
                    for (int i = 1; i < decimalDigits; i++)
                    {
                        decimalBuilder.Append(random.Next(0, 10));
                    }
                    
                    _decimalInput = decimalBuilder.ToString();
                    ConvertDecimalToBinary();
                    break;
                    
                case "binary":
                    int binaryDigits = random.Next(4, 32); // Random number of bits between 4 and 32
                    StringBuilder binaryBuilder = new StringBuilder();
                    
                    // First digit should be 1 to ensure a valid binary number
                    binaryBuilder.Append('1');
                    
                    // Remaining digits
                    for (int i = 1; i < binaryDigits; i++)
                    {
                        binaryBuilder.Append(random.Next(0, 2));
                    }
                    
                    _binaryInput = binaryBuilder.ToString();
                    ConvertBinaryToDecimal();
                    break;
            }
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error generating random number: {ex.Message}";
            _isError = true;
        }
    }
    
    private void ConvertDecimalToBinary()
    {
        try
        {
            _statusMessage = "";
            _isError = false;
            
            if (string.IsNullOrWhiteSpace(_decimalInput))
            {
                _statusMessage = "Please enter a decimal number to convert.";
                _isError = true;
                _result = "";
                return;
            }
            
            // Remove any non-digit characters if present (e.g., thousands separators)
            string cleanDecimal = new string(_decimalInput.Where(c => char.IsDigit(c)).ToArray());
            
            if (string.IsNullOrWhiteSpace(cleanDecimal))
            {
                _statusMessage = "Please enter a valid decimal number.";
                _isError = true;
                _result = "";
                return;
            }
            
            // Parse the decimal input
            if (BigInteger.TryParse(cleanDecimal, out BigInteger decimalValue))
            {
                // Convert decimal to binary
                string binaryResult = ConvertToBinary(decimalValue);
                
                // Format the binary result if grouping is enabled
                if (_groupDigitsBinary)
                {
                    binaryResult = FormatBinaryForDisplay(binaryResult);
                }
                
                _result = binaryResult;
                _lastConvertedValue = decimalValue;
                _binaryInput = binaryResult.Replace(" ", ""); // Update binary input
                _statusMessage = "Conversion successful!";
            }
            else
            {
                _statusMessage = "Invalid decimal number format.";
                _isError = true;
                _result = "";
            }
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error during conversion: {ex.Message}";
            _isError = true;
            _result = "";
        }
    }
    
    private void ConvertBinaryToDecimal()
    {
        try
        {
            _statusMessage = "";
            _isError = false;
            
            if (string.IsNullOrWhiteSpace(_binaryInput))
            {
                _statusMessage = "Please enter a binary number to convert.";
                _isError = true;
                _result = "";
                return;
            }
            
            // Remove any whitespace or other separators
            string cleanBinary = new string(_binaryInput.Where(c => c == '0' || c == '1').ToArray());
            
            if (string.IsNullOrWhiteSpace(cleanBinary))
            {
                _statusMessage = "Please enter a valid binary number (containing only 0s and 1s).";
                _isError = true;
                _result = "";
                return;
            }
            
            // Convert binary to decimal
            BigInteger decimalValue = BigInteger.Parse("0");
            BigInteger powerOfTwo = BigInteger.Parse("1");
            
            for (int i = cleanBinary.Length - 1; i >= 0; i--)
            {
                if (cleanBinary[i] == '1')
                {
                    decimalValue += powerOfTwo;
                }
                powerOfTwo *= 2;
            }
            
            // Format the decimal result if grouping is enabled
            string decimalResult = decimalValue.ToString();
            if (_groupDigitsDecimal)
            {
                decimalResult = FormatDecimalForDisplay(decimalValue);
            }
            
            _result = decimalResult;
            _lastConvertedValue = decimalValue;
            _decimalInput = decimalValue.ToString(); // Update decimal input
            _statusMessage = "Conversion successful!";
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error during conversion: {ex.Message}";
            _isError = true;
            _result = "";
        }
    }
    
    private string ConvertToBinary(BigInteger value)
    {
        if (value == 0)
            return "0";
            
        StringBuilder result = new StringBuilder();
        BigInteger remaining = value;
        
        while (remaining > 0)
        {
            BigInteger remainder = remaining % 2;
            result.Insert(0, remainder);
            remaining /= 2;
        }
        
        return result.ToString();
    }
    
    private string FormatDecimalForDisplay(BigInteger value)
    {
        // Group decimal digits in groups of three with comma separator
        string valueStr = value.ToString();
        StringBuilder result = new StringBuilder();
        
        int count = 0;
        for (int i = valueStr.Length - 1; i >= 0; i--)
        {
            result.Insert(0, valueStr[i]);
            count++;
            
            if (count % 3 == 0 && i > 0)
            {
                result.Insert(0, ",");
            }
        }
        
        return result.ToString();
    }
    
    private string FormatBinaryForDisplay(string binary)
    {
        // Group binary digits in groups of four with space separator
        StringBuilder result = new StringBuilder();
        
        int count = 0;
        for (int i = binary.Length - 1; i >= 0; i--)
        {
            result.Insert(0, binary[i]);
            count++;
            
            if (count % 4 == 0 && i > 0)
            {
                result.Insert(0, " ");
            }
        }
        
        return result.ToString();
    }
    
    private string ConvertToHex(BigInteger value)
    {
        return value.ToString("X");
    }
    
    private string ConvertToOctal(BigInteger value)
    {
        if (value == 0)
            return "0";
            
        StringBuilder result = new StringBuilder();
        BigInteger remaining = value;
        
        while (remaining > 0)
        {
            BigInteger remainder = remaining % 8;
            result.Insert(0, remainder);
            remaining /= 8;
        }
        
        return result.ToString();
    }
    
    private int GetBitCount(BigInteger value)
    {
        if (value == 0)
            return 1;
            
        return ConvertToBinary(value).Length;
    }
}