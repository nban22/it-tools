@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inherits ToolComponentBase

<div class="p-6 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen flex items-center justify-center">
    <div class="max-w-lg w-full">
        <!-- Header -->
        <div class="flex items-center justify-between mb-8 animate-fade-in">
            <div>
                <h2 class="text-3xl font-extrabold text-gray-900 tracking-tight">@Name</h2>
                <p class="text-gray-600 mt-2 text-lg">@Description</p>
            </div>
        </div>

        <!-- DNS Lookup Form -->
        <div class="bg-white p-8 rounded-2xl shadow-xl mb-6 animate-slide-in">
            <div class="space-y-6">
                <!-- Domain Input -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Domain Name:</label>
                    <input type="text" @bind="Domain" class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-800 placeholder-gray-400 h-12" placeholder="e.g., example.com" />
                    @if (_hasSubmitted && string.IsNullOrWhiteSpace(Domain))
                    {
                        <p class="text-red-500 text-xs mt-1 animate-fade-in">Please enter a valid domain.</p>
                    }
                    else if (_hasSubmitted && !IsValidDomain(Domain))
                    {
                        <p class="text-red-500 text-xs mt-1 animate-fade-in">Invalid domain format.</p>
                    }
                </div>

                <!-- Record Type Selection -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Record Type:</label>
                    <select @bind="RecordType" class="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 text-gray-800 h-12">
                        <option value="A">A (Address)</option>
                        <option value="AAAA">AAAA (IPv6 Address)</option>
                        <option value="MX">MX (Mail Exchange)</option>
                        <option value="NS">NS (Name Server)</option>
                        <option value="TXT">TXT (Text)</option>
                        <option value="CNAME">CNAME (Canonical Name)</option>
                    </select>
                </div>

                <!-- Lookup Button -->
                <div class="text-center">
                    <button @onclick="LookupDNS" disabled="@_isLookingUp" class="relative px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg hover:from-blue-600 hover:to-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 disabled:opacity-50 disabled:cursor-not-allowed h-12 w-full sm:w-auto">
                        @if (_isLookingUp)
                        {
                            <span class="flex items-center justify-center">
                                <svg class="animate-spin h-5 w-5 mr-2 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Looking Up...
                            </span>
                        }
                        else
                        {
                            <span>Lookup DNS</span>
                        }
                    </button>
                </div>
            </div>
        </div>

        <!-- DNS Lookup Results -->
        @if (_dnsResults.Any())
        {
            <div class="bg-white p-8 rounded-2xl shadow-xl animate-slide-in">
                <div class="flex items-center justify-between mb-6">
                    <h3 class="text-xl font-semibold text-gray-800">DNS Lookup Results</h3>
                    <button @onclick="CopyResults" disabled="@_isCopying" class="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 shadow-md disabled:opacity-50">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        @if (_isCopying)
                        {
                            <span>Copying...</span>
                        }
                        else
                        {
                            <span>Copy Results</span>
                        }
                    </button>
                </div>
                <div class="space-y-3">
                    @foreach (var result in _dnsResults)
                    {
                        <div class="flex items-center p-3 bg-gray-50 rounded-lg animate-fade-in">
                            <span class="flex-1 text-gray-700 font-medium">@result.Type:</span>
                            <span class="text-blue-600 font-semibold">@result.Value</span>
                        </div>
                    }
                </div>
            </div>
        }
        else if (_hasSubmitted)
        {
            <div class="bg-white p-8 rounded-2xl shadow-xl animate-slide-in">
                <div class="text-center">
                    <p class="text-red-600 font-medium">No DNS records found or invalid domain provided.</p>
                </div>
            </div>
        }
    </div>
</div>

<!-- Toast Notification -->
@if (_showToast)
{
    <div class="fixed bottom-6 right-6 z-50 animate-toast-in">
        <div class="flex items-center bg-@(_toastSuccess ? "green" : "red")-500 text-white px-4 py-3 rounded-lg shadow-lg">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(_toastSuccess ? "M5 13l4 4L19 7" : "M6 18L18 6M6 6l12 12")" />
            </svg>
            <span>@_toastMessage</span>
        </div>
    </div>
}

<style>
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @@keyframes slideIn {
        from { transform: translateY(-20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastIn {
        from { transform: translateY(20px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    @@keyframes toastOut {
        from { transform: translateY(0); opacity: 1; }
        to { transform: translateY(20px); opacity: 0; }
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    .animate-slide-in {
        animation: slideIn 0.5s ease-in-out;
    }

    .animate-toast-in {
        animation: toastIn 0.3s ease-in-out;
    }

    .animate-toast-out {
        animation: toastOut 0.3s ease-in-out forwards;
    }
</style>

@code {
    private string Domain { get; set; } = "";
    private string RecordType { get; set; } = "A";
    private List<DNSResult> _dnsResults { get; set; } = [];
    private bool _hasSubmitted { get; set; }
    private bool _isLookingUp { get; set; }
    private bool _isCopying { get; set; }
    private bool _showToast { get; set; }
    private bool _toastSuccess { get; set; }
    private string _toastMessage { get; set; } = "";

    public override string Name => "DNS Lookup";
    public override string Description => "Perform DNS lookups for various record types on a domain.";
    public override string Slug => "dns-lookup";
    public override string Group => "Network Tools";
    public override string Icon => "🌐";

    private class DNSResult
    {
        public string Type { get; set; } = "";
        public string Value { get; set; } = "";
    }

    private async Task LookupDNS()
    {
        _hasSubmitted = true;
        _dnsResults.Clear();

        if (string.IsNullOrWhiteSpace(Domain))
        {
            await ShowToast(false, "Please enter a valid domain.");
            return;
        }

        if (!IsValidDomain(Domain))
        {
            await ShowToast(false, "Invalid domain format.");
            return;
        }

        _isLookingUp = true;
        try
        {
            // Simulate DNS lookup (server-side logic needed for actual lookup)
            _dnsResults = await SimulateDNSLookup(Domain, RecordType);

            await ShowToast(_dnsResults.Any(),
                _dnsResults.Any() ? "DNS lookup completed successfully!" : "No DNS records found.");
        }
        catch (Exception ex)
        {
            await ShowToast(false, $"Error performing DNS lookup: {ex.Message}");
        }
        finally
        {
            _isLookingUp = false;
            StateHasChanged();
        }
    }

    private async Task<List<DNSResult>> SimulateDNSLookup(string domain, string recordType)
    {
        await Task.Delay(300); // Reduced delay for better UX
        var results = new List<DNSResult>();
        // Simulated data based on domain and record type
        switch (recordType)
        {
            case "A":
                results.Add(new DNSResult { Type = "A", Value = "93.184.216.34" });
                if (domain.Contains("example")) results.Add(new DNSResult { Type = "A", Value = "192.0.2.1" });
                break;
            case "AAAA":
                results.Add(new DNSResult { Type = "AAAA", Value = "2606:2800:220:1:248:1893:25c8:1946" });
                break;
            case "MX":
                results.Add(new DNSResult { Type = "MX", Value = $"10 mail.{domain}" });
                break;
            case "NS":
                results.Add(new DNSResult { Type = "NS", Value = $"ns1.{domain}" });
                results.Add(new DNSResult { Type = "NS", Value = $"ns2.{domain}" });
                break;
            case "TXT":
                results.Add(new DNSResult { Type = "TXT", Value = "v=spf1 include:_spf.example.com ~all" });
                break;
            case "CNAME":
                results.Add(new DNSResult { Type = "CNAME", Value = $"alias.{domain}" });
                break;
        }
        return results;
    }

    private async Task CopyResults()
    {
        if (!_dnsResults.Any())
        {
            await ShowToast(false, "No results to copy.");
            return;
        }

        _isCopying = true;
        try
        {
            var resultText = string.Join("\n", _dnsResults.Select(r => $"{r.Type}: {r.Value}"));
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", resultText);
            await ShowToast(true, "Results copied to clipboard!");
        }
        catch (Exception ex)
        {
            await ShowToast(false, $"Error copying results: {ex.Message}");
        }
        finally
        {
            _isCopying = false;
            StateHasChanged();
        }
    }

    private bool IsValidDomain(string domain)
    {
        if (string.IsNullOrWhiteSpace(domain)) return false;
        // Basic domain validation (can be extended with regex for stricter rules)
        return domain.Contains(".") && !domain.StartsWith(".") && !domain.EndsWith(".") &&
               domain.All(c => char.IsLetterOrDigit(c) || c == '.' || c == '-');
    }

    private async Task ShowToast(bool success, string message)
    {
        _toastSuccess = success;
        _toastMessage = message;
        _showToast = true;
        StateHasChanged();
        await Task.Delay(3000);
        _showToast = false;
        StateHasChanged();
    }
}