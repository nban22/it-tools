@using it_tools.ToolDevelopment.Base
@using it_tools.ToolDevelopment.Attributes
@using System.Security.Cryptography
@using System.Text
@attribute [ToolComponentAttribute(true)]
@inherits ToolComponentBase

<div class="p-4 bg-white rounded-lg shadow-md">
    <h2 class="text-xl font-bold mb-4">@Name</h2>
    <p class="text-gray-600 mb-6">@Description</p>
    
    <!-- Tool UI -->
    <div class="space-y-4">
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Message:</label>
            <textarea @bind="_inputText" class="w-full px-3 py-2 border border-gray-300 rounded-md" rows="5"></textarea>
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Secret Key:</label>
            <div class="flex">
                <input type="@(_showKey ? "text" : "password")" @bind="_secretKey" class="w-full px-3 py-2 border border-gray-300 rounded-md" />
            </div>
            <div class="mt-1 flex items-center">
                <input type="checkbox" id="showKey" @bind="_showKey" class="mr-2" />
                <label for="showKey" class="text-sm text-gray-600">Show Key</label>
            </div>
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Algorithm:</label>
            <select @bind="_selectedAlgorithm" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                @foreach (var algorithm in _algorithms)
                {
                    <option value="@algorithm">@algorithm</option>
                }
            </select>
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Output Format:</label>
            <select @bind="_selectedFormat" class="w-full px-3 py-2 border border-gray-300 rounded-md">
                <option value="Hex">Hexadecimal</option>
                <option value="Base64">Base64</option>
            </select>
        </div>
        
        <button @onclick="GenerateSignature" class="px-4 py-2 bg-blue-600 text-white rounded-md">
            Generate HMAC Signature
        </button>
        
        <button @onclick="GenerateRandomKey" class="px-4 py-2 bg-gray-500 text-white rounded-md">
            Generate Random Key
        </button>
        
        @if (!string.IsNullOrEmpty(_outputText))
        {
            <div class="mt-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Digital Signature:</label>
                <div class="p-3 bg-gray-50 rounded-md">
                    <textarea readonly class="w-full bg-transparent border-none" rows="3">@_outputText</textarea>
                </div>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="mt-2 p-2 bg-red-50 text-red-700 rounded-md">
                @_errorMessage
            </div>
        }
    </div>
</div>

@code {
    private string _inputText = "";
    private string _secretKey = "";
    private string _outputText = "";
    private string _errorMessage = "";
    private bool _showKey = false;
    private string _selectedAlgorithm = "HMAC-SHA256";
    private string _selectedFormat = "Hex";
    
    private readonly string[] _algorithms = new[]
    {
        "HMAC-SHA1",
        "HMAC-SHA256",
        "HMAC-SHA384",
        "HMAC-SHA512",
        "HMAC-MD5"
    };
    
    // Implement required properties from ToolComponentBase
    public override string Name => "HMAC Digital Signature";
    public override string Description => "Generate digital signatures using HMAC algorithms";
    public override string Group => "Encoding Tools";
    public override string Icon => "✒️";
    
    private void GenerateRandomKey()
    {
        try
        {
            _errorMessage = "";
            
            // Determine key size based on algorithm
            int keySize = 32; // Default for SHA256
            
            if (_selectedAlgorithm == "HMAC-SHA1" || _selectedAlgorithm == "HMAC-MD5")
            {
                keySize = 16;
            }
            else if (_selectedAlgorithm == "HMAC-SHA384" || _selectedAlgorithm == "HMAC-SHA512")
            {
                keySize = 64;
            }
            
            byte[] key = new byte[keySize];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(key);
            }
            
            _secretKey = Convert.ToBase64String(key);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error generating key: {ex.Message}";
        }
    }
    
    private void GenerateSignature()
    {
        try
        {
            _errorMessage = "";
            _outputText = "";
            
            if (string.IsNullOrEmpty(_inputText))
            {
                _errorMessage = "Please enter a message to sign";
                return;
            }
            
            if (string.IsNullOrEmpty(_secretKey))
            {
                _errorMessage = "Please enter a secret key";
                return;
            }
            
            // Get bytes from input message
            byte[] messageBytes = Encoding.UTF8.GetBytes(_inputText);
            
            // Get bytes from secret key
            byte[] keyBytes = Encoding.UTF8.GetBytes(_secretKey);
            
            // Compute HMAC
            byte[] hashBytes;
            
            switch (_selectedAlgorithm)
            {
                case "HMAC-SHA1":
                    using (HMACSHA1 hmac = new HMACSHA1(keyBytes))
                    {
                        hashBytes = hmac.ComputeHash(messageBytes);
                    }
                    break;
                case "HMAC-SHA256":
                    using (HMACSHA256 hmac = new HMACSHA256(keyBytes))
                    {
                        hashBytes = hmac.ComputeHash(messageBytes);
                    }
                    break;
                case "HMAC-SHA384":
                    using (HMACSHA384 hmac = new HMACSHA384(keyBytes))
                    {
                        hashBytes = hmac.ComputeHash(messageBytes);
                    }
                    break;
                case "HMAC-SHA512":
                    using (HMACSHA512 hmac = new HMACSHA512(keyBytes))
                    {
                        hashBytes = hmac.ComputeHash(messageBytes);
                    }
                    break;
                case "HMAC-MD5":
                    using (HMACMD5 hmac = new HMACMD5(keyBytes))
                    {
                        hashBytes = hmac.ComputeHash(messageBytes);
                    }
                    break;
                default:
                    throw new ArgumentException("Invalid algorithm selected");
            }
            
            // Format the output according to the selected format
            if (_selectedFormat == "Hex")
            {
                StringBuilder result = new StringBuilder();
                for (int i = 0; i < hashBytes.Length; i++)
                {
                    result.Append(hashBytes[i].ToString("x2"));
                }
                _outputText = result.ToString();
            }
            else // Base64
            {
                _outputText = Convert.ToBase64String(hashBytes);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error generating signature: {ex.Message}";
        }
    }
}